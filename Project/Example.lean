import Project.Dilatation.Multicenter
import Project.Dilatation.ReesAlgebra
import Mathlib.RingTheory.Ideal.Maps
import Mathlib.Algebra.DirectSum.Basic
import Project.Dilatation.lemma
import Mathlib.RingTheory.Ideal.Operations
import Mathlib.RingTheory.Localization.Basic
import Project.Dilatation.Family
import Mathlib.RingTheory.GradedAlgebra.Basic
import Mathlib.RingTheory.TensorProduct.Basic
import Project.HomogeneousSubmonoid.Basic
import Project.ForMathlib.TensorProduct
import Project.Proj.Over



universe u
variable {A : Type} [CommRing A]
variable {Œπ : Type} (L : Œπ ‚Üí Ideal A)
[DecidableEq Œπ]


-- instance : AddCommGroup (Œπ ‚Üí‚ÇÄ ‚Ñ§) := Finsupp.instAddCommGroup (Œ± := Œπ) (G := ‚Ñï)

open GoodPotionIngredient
def Bl  := Proj (Œπ := Œπ ‚Üí‚ÇÄ ‚Ñ§) (R‚ÇÄ := A) (A := ReesAlgebra L) (ùíú := (ReesAlgebra.grading L))
         (œÑ := GoodPotionIngredient (ReesAlgebra.grading L) ) id
