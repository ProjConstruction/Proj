import Mathlib.RingTheory.GradedAlgebra.Basic
import Mathlib.Data.Real.Basic
import Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal
import Mathlib.Data.NNReal.Basic
import Mathlib.LinearAlgebra.TensorProduct.Tower
import Mathlib.GroupTheory.Torsion
import Mathlib.GroupTheory.FiniteAbelian.Basic
import Mathlib.GroupTheory.Schreier

import Project.ForMathlib.SubgroupBasic
import Project.ForMathlib.SetLikeHomogeneous
import Project.GR.Basic

open DirectSum TensorProduct
open scoped NNReal

variable {Œπ A œÉ : Type*}
variable [AddCommGroup Œπ] [CommRing A] [SetLike œÉ A]  (ùíú : Œπ ‚Üí œÉ)
variable [DecidableEq Œπ] [AddSubgroupClass œÉ A] [GradedRing ùíú]

structure HomogeneousSubmonoid extends Submonoid A where
  homogeneous : ‚àÄ {x}, x ‚àà toSubmonoid ‚Üí SetLike.Homogeneous ùíú x

open scoped GR

namespace HomogeneousSubmonoid

variable {ùíú} (S : HomogeneousSubmonoid ùíú)

def closure (s : Set A) (hs : ‚àÄ x ‚àà s, SetLike.Homogeneous ùíú x) : HomogeneousSubmonoid ùíú where
  __ := Submonoid.closure s
  homogeneous {x} (hx : x ‚àà Submonoid.closure s) :=
    Submonoid.closure_induction hs
      (SetLike.homogeneous_one ùíú)
      (fun _ _ _ _ hx hy => SetLike.homogeneous_mul hx hy) hx

lemma mem_closure_singleton (a : A) (ha : SetLike.Homogeneous ùíú a) (x) :
    x ‚àà (closure {a} (by simpa)).toSubmonoid ‚Üî
    ‚àÉ (n : ‚Ñï), x = a ^ n := by
  simp [closure, Submonoid.mem_closure_singleton, eq_comm]

def bar : HomogeneousSubmonoid ùíú where
  carrier := {x | SetLike.Homogeneous ùíú x ‚àß ‚àÉ y ‚àà S.toSubmonoid, x ‚à£ y}
  mul_mem' := by
    rintro x y ‚ü®hom_x, ‚ü®ax, ‚ü®hax, hax'‚ü©‚ü©‚ü© ‚ü®hom_y, ‚ü®ay, ‚ü®hay, hay'‚ü©‚ü©‚ü©
    exact ‚ü®SetLike.homogeneous_mul hom_x hom_y, ‚ü®ax * ay, ‚ü®mul_mem hax hay,
      mul_dvd_mul hax' hay'‚ü©‚ü©‚ü©
  one_mem' := ‚ü®SetLike.homogeneous_one ùíú, ‚ü®1, ‚ü®one_mem _, by rfl‚ü©‚ü©‚ü©
  homogeneous := by rintro x ‚ü®hom_x, ‚ü®y, ‚ü®hy, hy'‚ü©‚ü©‚ü©; exact hom_x

def deg : AddSubmonoid Œπ where
  carrier := {i | ‚àÉ x ‚àà S.toSubmonoid, x ‚àà ùíú i}
  add_mem' := by
    rintro i j ‚ü®x, hx, hx'‚ü© ‚ü®y, hy, hy'‚ü©
    exact ‚ü®x * y, mul_mem hx hy, SetLike.GradedMul.mul_mem hx' hy'‚ü©
  zero_mem' := ‚ü®1, one_mem _, SetLike.GradedOne.one_mem‚ü©

lemma mem_deg_singleton (a : A) (ha : SetLike.Homogeneous ùíú a) (x) :
    x ‚àà (closure {a} (by simpa)).deg ‚Üî
    (‚àÉ n : ‚Ñï, a ^ n ‚àà ùíú x) := by
  simp only [deg, ne_eq, Set.mem_setOf_eq, exists_and_right]
  fconstructor
  ¬∑ rintro ‚ü®y, hy, h‚ü©
    rw [mem_closure_singleton (ha := ha)] at hy
    obtain ‚ü®n, rfl‚ü© := hy
    exact ‚ü®n, ‚Äπ_‚Ä∫‚ü©
  ¬∑ rintro ‚ü®n, hn‚ü©
    refine ‚ü®a^n, ?_, hn‚ü©
    rw [mem_closure_singleton (ha := ha)]
    aesop

lemma mem_deg {i} : i ‚àà S.deg ‚Üî ‚àÉ x ‚àà S.toSubmonoid, x ‚àà ùíú i := Iff.rfl

lemma zero_mem_deg [Nontrivial A] : 0 ‚àà S.deg :=
  ‚ü®1, one_mem _, SetLike.GradedOne.one_mem‚ü©

def monDeg  : AddSubmonoid Œπ := AddSubmonoid.closure S.deg

scoped notation:max Œπ"["S"‚ü©" => monDeg (Œπ := Œπ) S

def agrDeg : AddSubgroup Œπ := AddSubgroup.closure S.deg

scoped notation:max Œπ"["S"]" => agrDeg (Œπ := Œπ) S

noncomputable def agrDegEquiv : Œπ[S‚ü©·µÉ·µç ≥ ‚âÉ+ Œπ[S] := (AddGR.equivAsAddSubgroup ..).trans
  { __ := AddSubgroup.inclusion (by
      rw [AddSubgroup.closure_le]
      change S.monDeg ‚â§ S.agrDeg.toAddSubmonoid
      erw [AddSubmonoid.closure_le]
      dsimp only [AddSubgroup.coe_toAddSubmonoid, agrDeg]
      exact AddSubgroup.subset_closure)
    invFun := AddSubgroup.inclusion (by
      erw [AddSubgroup.closure_le]
      refine AddSubgroup.subset_closure.trans ?_
      refine AddSubgroup.closure_mono ?_
      exact AddSubmonoid.subset_closure)
    left_inv x := rfl
    right_inv x := rfl }

noncomputable def convMonDegEmbedding : (‚Ñù‚â•0 ‚äó[‚Ñï] Œπ[S‚ü©) ‚Üí‚Çó[‚Ñù‚â•0] (‚Ñù ‚äó[‚Ñ§] Œπ) :=
  TensorProduct.AlgebraTensorModule.lift
    { toFun r :=
        { toFun i := r.1 ‚äó‚Çú i.1
          map_add' x y := by simp [‚Üê tmul_add]
          map_smul' s x := by
            simp only [NNReal.val_eq_coe, AddSubmonoidClass.coe_nsmul, eq_natCast, Nat.cast_id]
            rw [smul_tmul']
            erw [show s ‚Ä¢ r.1 = (s : ‚Ñ§) ‚Ä¢ r.1 from rfl]
            rw [smul_tmul]
            congr 1
            simp }
      map_add' r s := by ext; simp [add_tmul]
      map_smul' r s := by
        ext
        simp only [smul_eq_mul, NNReal.val_eq_coe, NNReal.coe_mul, LinearMap.coe_mk,
          AddHom.coe_mk, RingHom.id_apply, LinearMap.smul_apply, smul_tmul']
        rfl }

@[simp]
lemma convMonDegEmbedding_apply_tmul (r : ‚Ñù‚â•0) (i : Œπ[S‚ü©) :
    convMonDegEmbedding S (r ‚äó‚Çú i) = r.1 ‚äó‚Çú i.1 := rfl

noncomputable def convMonDeg : Submodule ‚Ñù‚â•0 (‚Ñù ‚äó[‚Ñ§] Œπ) := LinearMap.range (convMonDegEmbedding S)

noncomputable def convMonDeg' : Submodule ‚Ñù‚â•0 (‚Ñù ‚äó[‚Ñ§] Œπ) :=
  Submodule.span ‚Ñù‚â•0 {x | ‚àÉ (a : ‚Ñù‚â•0) (i : Œπ) (_ : i ‚àà S.deg) , x = a.1 ‚äó‚Çú i }

scoped notation:max Œπ"["S"‚ü©‚Ñù‚â•0" => convMonDeg (Œπ := Œπ) S

lemma mem_convMonDeg [Nontrivial A] (x) :
    x ‚àà Œπ[S‚ü©‚Ñù‚â•0 ‚Üî
    ‚àÉ (s : Œπ ‚Üí‚ÇÄ ‚Ñù‚â•0), (‚àÄ i ‚àà s.support, i ‚àà S.deg) ‚àß x = ‚àë i ‚àà s.support, (s i).1 ‚äó‚Çú i := by
  classical
  fconstructor
  ¬∑ rintro ‚ü®x, rfl‚ü©
    induction x using TensorProduct.induction_on with
    | zero =>
      refine ‚ü®0, ?_, by simp‚ü©
      intro i hi
      simp only [Finsupp.support_zero, Finset.not_mem_empty] at hi
    | tmul a i =>
      rcases i with ‚ü®i, hi‚ü©
      induction hi using AddSubmonoid.closure_induction with
      | mem i hi =>
        refine ‚ü®Finsupp.single i a, ?_, ?_‚ü©
        ¬∑ intro i hi
          simp only [Finsupp.mem_support_iff, Finsupp.single_apply, ne_eq, ite_eq_right_iff,
            Classical.not_imp] at hi
          rwa [‚Üê hi.1]
        simp only [convMonDegEmbedding_apply_tmul, NNReal.val_eq_coe]
        rw [eq_comm, Finset.sum_eq_single i]
        ¬∑ simp
        ¬∑ intro j hj H
          simp [Finsupp.single_eq_of_ne H.symm]
        aesop
      | one => exact ‚ü®0, by aesop, by simp‚ü©
      | mul i j _ _ ih ih' =>
        obtain ‚ü®s, hs, eq‚ü© := ih
        obtain ‚ü®t, ht, eq'‚ü© := ih'
        simp only [convMonDegEmbedding_apply_tmul, NNReal.val_eq_coe, ne_eq, tmul_add] at eq eq' ‚ä¢
        simp_rw [eq, eq']
        refine ‚ü®s + t, ?_, ?_‚ü©
        ¬∑ intro j hj
          have := Finsupp.support_add hj
          simp only [Finset.mem_union, Finsupp.mem_support_iff, ne_eq] at this hs ht
          tauto
        simp only [Finsupp.coe_add, Pi.add_apply, NNReal.coe_add, add_tmul, Finset.sum_add_distrib]
        nth_rewrite 1 [show (s + t).support = s.support ‚à™ ((s + t).support \ s.support) by
          ext; aesop]
        nth_rewrite 2 [show (s + t).support = t.support ‚à™ ((s + t).support \ t.support) by
          ext; aesop]
        rw [Finset.sum_union_eq_left, Finset.sum_union_eq_left]
        ¬∑ aesop
        ¬∑ aesop
    | add x y ihx ihy =>
      obtain ‚ü®s, hs, eq‚ü© := ihx
      obtain ‚ü®t, ht, eq'‚ü© := ihy
      simp only [NNReal.val_eq_coe, Finsupp.mem_support_iff, ne_eq, map_add] at eq eq' ‚ä¢
      simp_rw [eq, eq']
      refine ‚ü®s + t, ‚ü®?_, ?_‚ü©‚ü©
      ¬∑ intro j hj
        simp only [Finsupp.mem_support_iff, ne_eq, Finsupp.coe_add, Pi.add_apply,
          AddLeftCancelMonoid.add_eq_zero, not_and] at hs ht hj
        tauto
      simp only [Finsupp.coe_add, Pi.add_apply, NNReal.coe_add, add_tmul, Finset.sum_add_distrib]
      nth_rewrite 1 [show (s + t).support = s.support ‚à™ ((s + t).support \ s.support) by
        ext; aesop]
      nth_rewrite 2 [show (s + t).support = t.support ‚à™ ((s + t).support \ t.support) by
        ext; aesop]
      rw [Finset.sum_union_eq_left, Finset.sum_union_eq_left]
      ¬∑ aesop
      ¬∑ intro a ha ha'
        simp only [Finsupp.mem_support_iff, ne_eq, Decidable.not_not] at ha'
        simp only [ha', NNReal.coe_zero, zero_tmul]

  ¬∑ rintro ‚ü®a, ha, hi, rfl‚ü©
    refine Submodule.sum_mem _ fun i hi => ?_
    exact ‚ü®a i ‚äó‚Çú[‚Ñï] ‚ü®i, AddSubmonoid.subset_closure (ha i hi)‚ü©, rfl‚ü©

def IsRelevant : Prop := ‚àÄ (i : Œπ), ‚àÉ (n : ‚Ñï), 0 < n ‚àß n ‚Ä¢ i ‚àà Œπ[S.bar]

lemma isRelevant_iff_isTorsion_quotient : S.IsRelevant ‚Üî AddMonoid.IsTorsion (Œπ ‚ß∏ Œπ[S.bar]) := by
  fconstructor
  ¬∑ intro H x
    induction x using Quotient.inductionOn' with | h x =>
    rw [isOfFinAddOrder_iff_nsmul_eq_zero]
    obtain ‚ü®n, hn, hx‚ü© := H x
    refine ‚ü®n, hn, ?_‚ü©
    change Quotient.mk'' (n ‚Ä¢ x) = _
    rwa [QuotientAddGroup.eq_zero_iff]
  ¬∑ intro H i
    specialize H i
    rw [isOfFinAddOrder_iff_nsmul_eq_zero] at H
    obtain ‚ü®n, hn, hni‚ü© := H
    refine ‚ü®n, hn, ?_‚ü©
    change Quotient.mk'' (n ‚Ä¢ i) = _ at hni
    rwa [QuotientAddGroup.eq_zero_iff] at hni

lemma isRelevant_iff_finite_quotient_of_FG [AddGroup.FG Œπ] :
    S.IsRelevant ‚Üî Finite (Œπ ‚ß∏ Œπ[S.bar]) := by
  rw [isRelevant_iff_isTorsion_quotient]
  fconstructor
  ¬∑ intro H
    exact AddCommGroup.finite_of_fg_torsion _ H
  ¬∑ intro H
    apply is_add_torsion_of_finite

lemma isRelevant_iff_finiteIndex_of_FG [AddGroup.FG Œπ] :
    S.IsRelevant ‚Üî Œπ[S.bar].FiniteIndex := by
  rw [isRelevant_iff_finite_quotient_of_FG]
  fconstructor
  ¬∑ intro H
    exact Œπ[S.bar].finiteIndex_of_finite_quotient
  ¬∑ intro H
    exact Œπ[S.bar].finite_quotient_of_finiteIndex

abbrev SetIsRelevant (s : Set A) (hs : ‚àÄ i ‚àà s, SetLike.Homogeneous ùíú i) : Prop :=
  closure s hs |>.IsRelevant

abbrev ElemIsRelevant (a : A) (ha : SetLike.Homogeneous ùíú a) : Prop :=
  closure {a} (by simpa) |>.IsRelevant

attribute [to_additive] Subgroup.closure_mul_image_mul_eq_top
attribute [to_additive] Subgroup.closure_mul_image_eq
attribute [to_additive] Subgroup.closure_mul_image_eq_top
attribute [to_additive] Subgroup.closure_mul_image_eq_top'
attribute [to_additive] Subgroup.exists_finset_card_le_mul
attribute [to_additive] Subgroup.fg_of_index_ne_zero

lemma exists_factorisation_of_elemIsRelevant
    [AddGroup.FG Œπ] (a : A) (ha : SetLike.Homogeneous ùíú a) (a_rel : ElemIsRelevant a ha) :
    ‚àÉ (n : ‚Ñï) (x : Fin n ‚Üí A) (d : Fin n ‚Üí Œπ)
      (_ : ‚àÄ (i : Fin n), x i ‚àà ùíú (d i)),
      (AddSubgroup.closure (Set.range d)).FiniteIndex ‚àß
      (‚àÉ (k : ‚Ñï), ‚àè i : Fin n, x i = a ^ k) := by
  classical
  rw [ElemIsRelevant, isRelevant_iff_finiteIndex_of_FG] at a_rel
  haveI fg : AddGroup.FG Œπ[(closure {a} (by simpa)).bar] := by
    exact AddSubgroup.fg_of_index_ne_zero _
  obtain ‚ü®s, hs1, hs2‚ü© :=
    AddGroup.exists_finite_generating_set_of_FG' Œπ
    (closure (ùíú := ùíú) {a} (by simpa)).bar.deg fg
  have hs3 : ‚àÄ i : s, ‚àÉ (y : A), y ‚àà ùíú i ‚àß (‚àÉ (n : ‚Ñï), y ‚à£ a^n) := by
    rintro ‚ü®i, hi‚ü©
    specialize hs1 hi
    simp only [deg, bar, Submonoid.mem_mk, Subsemigroup.mem_mk, Set.mem_setOf_eq, ne_eq] at hs1
    obtain ‚ü®y, ‚ü®_, ‚ü®z, hz1, hz2‚ü©‚ü©, hy‚ü© := hs1
    rw [mem_closure_singleton (ha := ha)] at hz1
    obtain ‚ü®n, rfl‚ü© := hz1
    exact ‚ü®y, hy, n, hz2‚ü©

  choose y y_mem y_dvd using hs3
  choose n y_dvd using y_dvd
  let N : ‚Ñï := s.card
  let d : Fin N ‚Üí Œπ := Subtype.val ‚àò (Finset.equivFin s).symm
  let x : Fin N ‚Üí A := y ‚àò (Finset.equivFin s).symm
  let k : Fin N ‚Üí ‚Ñï := n ‚àò (Finset.equivFin s).symm
  let K : ‚Ñï := ‚àë i : Fin N, k i
  have dvd : (‚àè i : Fin N, x i) ‚à£ a ^ K := by
    rw [‚Üê Finset.prod_pow_eq_pow_sum]
    apply Finset.prod_dvd_prod_of_dvd
    rintro ‚ü®i, hi‚ü© -
    apply y_dvd
  obtain ‚ü®b, hb, ‚ü®j, hj‚ü©‚ü© := SetLike.Homogeneous.exists_homogeneous_of_dvd ùíú (by
    refine SetLike.Homogeneous.prod' ùíú x fun j ‚Ü¶ ?_
    simpa [x] using ‚ü®_, y_mem _‚ü©) (by
    refine SetLike.Homogeneous.pow ùíú ?_ _
    assumption) dvd
  refine ‚ü®N + 1, Fin.cons b x, Fin.cons j d, ?_, ?_, ‚ü®K, ?_‚ü©‚ü©
  ¬∑ intro i
    refine Fin.cases ?_ ?_ i
    ¬∑ simpa
    ¬∑ intro m
      apply y_mem

  ¬∑ have : AddSubgroup.closure s ‚â§ AddSubgroup.closure (Set.range (Fin.cons j d)) := by
      apply AddSubgroup.closure_mono
      intro i hi
      simp only [Fin.range_cons, Set.mem_insert_iff, Set.mem_range, Function.comp_apply, d, N]
      if h : i = j
      then left; exact h
      else
      right
      use s.equivFin ‚ü®i, hi‚ü©
      simp only [Equiv.symm_apply_apply, N, d]
    rw [hs2] at this
    convert AddSubgroup.finiteIndex_of_le this
    exact a_rel
  ¬∑ simp [‚Üê hb, mul_comm]

lemma elemIsRelevant_of_homogeneous_of_factorisation
    [AddGroup.FG Œπ] (a : A) (ha : SetLike.Homogeneous ùíú a)
    (n : ‚Ñï) (x : Fin n ‚Üí A) (d : Fin n ‚Üí Œπ)
    (mem : ‚àÄ (i : Fin n), x i ‚àà ùíú (d i))
    (finiteIndex : (AddSubgroup.closure (Set.range d)).FiniteIndex)
    (k : ‚Ñï) (eq : ‚àè i : Fin n, x i = a ^ k) :  ElemIsRelevant a ha := by
  rw [ElemIsRelevant, isRelevant_iff_finiteIndex_of_FG]
  set H := _; change AddSubgroup.FiniteIndex H
  suffices le : AddSubgroup.closure (Set.range d) ‚â§ H by
    exact AddSubgroup.finiteIndex_of_le le
  rw [AddSubgroup.closure_le]
  rintro _ ‚ü®i, rfl‚ü©
  refine AddSubgroup.subset_closure ?_
  simp only [deg, bar, Submonoid.mem_mk, Subsemigroup.mem_mk, Set.mem_setOf_eq, ne_eq]
  exact ‚ü®x i, ‚ü®‚ü®d i, mem i‚ü©, ‚ü®a ^ k, by rw [mem_closure_singleton (ha := ha)]; aesop, by
    rw [‚Üê eq]; apply Finset.dvd_prod_of_mem; aesop‚ü©‚ü©, mem i‚ü©

lemma elemIsRelevant_iff [AddGroup.FG Œπ]
    (a : A) (ha : SetLike.Homogeneous ùíú a) :
    ElemIsRelevant a ha ‚Üî
    ‚àÉ (n : ‚Ñï) (x : Fin n ‚Üí A) (d : Fin n ‚Üí Œπ)
      (_ : ‚àÄ (i : Fin n), x i ‚àà ùíú (d i)),
      (AddSubgroup.closure (Set.range d)).FiniteIndex ‚àß
      (‚àÉ (k : ‚Ñï), ‚àè i : Fin n, x i = a ^ k) := by
  fconstructor
  ¬∑ intro h
    exact exists_factorisation_of_elemIsRelevant _ ha h
  ¬∑ rintro ‚ü®n, x, d, mem, finiteIndex, k, eq‚ü©
    exact elemIsRelevant_of_homogeneous_of_factorisation _ ha n x d mem finiteIndex k eq

variable (ùíú) in
def dagger : HomogeneousIdeal ùíú where
  __ := Ideal.span { x | ‚àÉ (h : SetLike.Homogeneous ùíú x), ElemIsRelevant x h }
  is_homogeneous' := Ideal.homogeneous_span _ _ (by rintro x ‚ü®h, _‚ü©; exact h)

scoped postfix:max "‚Ä†" => dagger

end HomogeneousSubmonoid
