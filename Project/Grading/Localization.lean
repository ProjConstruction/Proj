import Mathlib.RingTheory.Localization.Basic

import Project.HomogeneousSubmonoid.Basic

open DirectSum

variable {Œπ A œÉ : Type*}
variable [AddCommGroup Œπ] [CommRing A] [SetLike œÉ A]  (ùíú : Œπ ‚Üí œÉ)

namespace HomogeneousSubmonoid

variable (S : HomogeneousSubmonoid ùíú)

variable {ùíú}

structure PreLocalizationGrading (i : Œπ) where
  num : A
  den : S.toSubmonoid
  degNum : Œπ
  degDen : Œπ
  num_mem : num ‚àà ùíú degNum
  den_mem : (den : A) ‚àà ùíú degDen
  deg_frac_eq : degNum - degDen = i

namespace PreLocalizationGrading

@[ext]
lemma ext {i : Œπ} (x y : S.PreLocalizationGrading i)
    (num_eq : x.num = y.num) (den_eq : x.den = y.den)
    (degNum_eq : x.degNum = y.degNum)
    (degDen_eq : x.degDen = y.degDen) : x = y := by
  rcases x with ‚ü®a_x, ‚ü®b_x, hb_x‚ü©, mx, nx, hax, hbx, hx‚ü©
  rcases y with ‚ü®a_y, ‚ü®b_y, hb_y‚ü©, my, ny, hay, hby, hy‚ü©
  simp only [Subtype.mk.injEq, mk.injEq] at *
  subst num_eq den_eq degNum_eq degDen_eq
  aesop

variable [AddSubgroupClass œÉ A]
instance (i : Œπ) : Neg (S.PreLocalizationGrading i) where
  neg x := ‚ü®-x.num, x.den, x.degNum, x.degDen, neg_mem x.num_mem, x.den_mem, x.deg_frac_eq‚ü©

@[simp]
lemma neg_num {i : Œπ} (x : S.PreLocalizationGrading i) : (-x).num = -x.num := rfl

@[simp]
lemma neg_den {i : Œπ} (x : S.PreLocalizationGrading i) : (-x).den = x.den := rfl

@[simp]
lemma neg_degNum {i : Œπ} (x : S.PreLocalizationGrading i) : (-x).degNum = x.degNum := rfl

@[simp]
lemma neg_degDen {i : Œπ} (x : S.PreLocalizationGrading i) : (-x).degDen = x.degDen := rfl

variable [DecidableEq Œπ] [GradedRing ùíú]
instance (i : Œπ) : Add (S.PreLocalizationGrading i) where
  add x y :=
  { num := x.den * y.num + y.den * x.num
    den := x.den * y.den
    degNum := x.degDen + y.degNum
    degDen := x.degDen + y.degDen
    num_mem := by
      refine add_mem (SetLike.GradedMul.mul_mem x.den_mem y.num_mem) ?_
      convert SetLike.GradedMul.mul_mem y.den_mem x.num_mem using 2

      have eq‚ÇÅ := x.deg_frac_eq
      have eq‚ÇÇ := y.deg_frac_eq
      rw [sub_eq_iff_eq_add] at eq‚ÇÅ eq‚ÇÇ
      rw [eq‚ÇÅ, eq‚ÇÇ]
      abel
    den_mem := SetLike.GradedMul.mul_mem x.den_mem y.den_mem
    deg_frac_eq := by simp_rw [‚Üê y.deg_frac_eq]; abel }

@[simp]
lemma add_num {i : Œπ} (x y : S.PreLocalizationGrading i) : (x + y).num = x.den * y.num + y.den * x.num := rfl

@[simp]
lemma add_den {i : Œπ} (x y : S.PreLocalizationGrading i) : (x + y).den = x.den * y.den := rfl

@[simp]
lemma add_degNum {i : Œπ} (x y : S.PreLocalizationGrading i) : (x + y).degNum = x.degDen + y.degNum := rfl

@[simp]
lemma add_degDen {i : Œπ} (x y : S.PreLocalizationGrading i) : (x + y).degDen = x.degDen + y.degDen := rfl

instance : One (S.PreLocalizationGrading 0) where
  one := ‚ü®1, 1, 0, 0, SetLike.GradedOne.one_mem, SetLike.GradedOne.one_mem, by abel‚ü©

@[simp]
lemma one_num : (1 : S.PreLocalizationGrading 0).num = 1 := rfl

@[simp]
lemma one_den : (1 : S.PreLocalizationGrading 0).den = 1 := rfl

@[simp]
lemma one_degNum : (1 : S.PreLocalizationGrading 0).degNum = 0 := rfl

@[simp]
lemma one_degDen : (1 : S.PreLocalizationGrading 0).degDen = 0 := rfl

instance (i : Œπ) : Zero (S.PreLocalizationGrading i) where
  zero := ‚ü®0, 1, i, 0, zero_mem (ùíú i), SetLike.GradedOne.one_mem, by simp‚ü©

@[simp]
lemma zero_num {i : Œπ} : (0 : S.PreLocalizationGrading i).num = 0 := rfl

@[simp]
lemma zero_den {i : Œπ} : (0 : S.PreLocalizationGrading i).den = 1 := rfl

@[simp]
lemma zero_degNum {i : Œπ} : (0 : S.PreLocalizationGrading i).degNum = i := rfl

@[simp]
lemma zero_degDen {i : Œπ} : (0 : S.PreLocalizationGrading i).degDen = 0 := rfl

@[simp]
lemma neg_zero {i : Œπ} : -(0 : S.PreLocalizationGrading i) = 0 := by ext <;> simp

instance (i : Œπ) : AddZeroClass (S.PreLocalizationGrading i) where
  zero_add x := by ext <;> simp
  add_zero x := by ext <;> simp [‚Üê x.deg_frac_eq]

instance (i : Œπ) : AddSemigroup (S.PreLocalizationGrading i) where
  add_assoc x y z := by
    ext
    ¬∑ simp only [add_num, add_den, Submonoid.coe_mul]; ring
    ¬∑ simp only [add_den, Submonoid.coe_mul]; ring
    ¬∑ simp only [add_degNum, add_degDen]; abel
    ¬∑ simp only [add_degDen]; abel

instance (i : Œπ) : SubNegMonoid (S.PreLocalizationGrading i) where
  zero_add _ := by ext <;> simp
  add_zero _ := by ext <;> simp
  nsmul := nsmulRec
  zsmul := zsmulRec

@[simps]
def val (i : Œπ) : (S.PreLocalizationGrading i) ‚Üí+ Localization S.toSubmonoid where
  toFun x := Localization.mk x.num x.den
  map_zero' := Localization.mk_zero 1
  map_add' := by simp [Localization.add_mk]

def addCon (i : Œπ) : AddCon (S.PreLocalizationGrading i) := AddCon.ker (val S i)

instance (i : Œπ) : Neg (addCon S i).Quotient where
  neg := (addCon S i).lift
    { toFun x := (addCon S i).mk' (-x)
      map_zero' := by
        simp only [neg_zero, AddCon.coe_mk', AddCon.coe_zero]
      map_add' x y := by
        dsimp only [AddCon.coe_mk', AddCon.coe_zero, ZeroHom.toFun_eq_coe, ZeroHom.coe_mk]
        rw [‚Üê AddCon.coe_mk', ‚Üê map_add]
        erw [AddCon.eq]
        simp only [addCon, val, AddCon.ker_rel, AddMonoidHom.coe_mk, ZeroHom.coe_mk, neg_num,
          add_num, neg_add_rev, neg_den, add_den, mul_neg, Localization.mk_eq_mk_iff,
          Localization.r_iff_exists, Submonoid.coe_mul, Subtype.exists, exists_prop]
        exact ‚ü®1, S.toSubmonoid.one_mem, by ring‚ü© } fun x y h => by
    simp only [addCon, val, AddCon.ker_rel, AddMonoidHom.coe_mk, ZeroHom.coe_mk,
      Localization.mk_eq_mk_iff, Localization.r_iff_exists, Subtype.exists, exists_prop,
      AddCon.coe_mk', AddCon.eq, neg_num, neg_den, mul_neg, neg_inj] at h ‚ä¢
    exact h

instance (i : Œπ) : AddCommGroup (addCon S i).Quotient where
  neg := _
  zsmul := zsmulRec nsmulRec
  neg_add_cancel := by
    intro a
    obtain ‚ü®a, rfl‚ü© := AddCon.mk'_surjective a
    simp only [AddCon.coe_mk', AddCon.lift_coe, AddMonoidHom.coe_mk, ZeroHom.coe_mk]
    rw [‚Üê AddCon.coe_mk', ‚Üê map_add]
    erw [AddCon.eq]
    simp only [addCon, val, AddCon.ker_rel, AddMonoidHom.coe_mk, ZeroHom.coe_mk, add_num, neg_den,
      neg_num, mul_neg, add_neg_cancel, add_den, zero_num, zero_den, Localization.mk_eq_mk_iff,
      Localization.r_iff_exists, OneMemClass.coe_one, mul_zero, Submonoid.coe_mul, exists_const]
  add_comm := by
    intro a b
    obtain ‚ü®a, rfl‚ü© := AddCon.mk'_surjective a
    obtain ‚ü®b, rfl‚ü© := AddCon.mk'_surjective b
    simp only [AddCon.coe_mk']
    rw [‚Üê AddCon.coe_mk', ‚Üê map_add, ‚Üê map_add]
    erw [AddCon.eq]
    simp only [addCon, val, AddCon.ker_rel, AddMonoidHom.coe_mk, ZeroHom.coe_mk, add_num, add_den]
    congr 1
    ¬∑ ring
    ¬∑ rw [mul_comm]

@[simps!]
def emb (i : Œπ) : (addCon S i).Quotient ‚Üí+ Localization S.toSubmonoid :=
  AddCon.lift _ (val ..) le_rfl

-- sanity check
example {i : Œπ} (x y : S.PreLocalizationGrading i) :
    addCon S i x y ‚Üî Localization.mk x.num x.den = Localization.mk y.num y.den := by
  simp [addCon]

end PreLocalizationGrading

variable [AddSubgroupClass œÉ A] [DecidableEq Œπ] [GradedRing ùíú]

def LocalizationGrading (i : Œπ) : AddSubgroup (Localization S.toSubmonoid) := (PreLocalizationGrading.emb S i).range

namespace LocalizationGrading

lemma one_mem : 1 ‚àà S.LocalizationGrading 0 := ‚ü®AddCon.mk' _ 1, Localization.mk_one‚ü©

instance : SetLike.GradedMonoid S.LocalizationGrading where
  one_mem := HomogeneousSubmonoid.LocalizationGrading.one_mem ..
  mul_mem := by
    rintro i j _ _ ‚ü®x, rfl‚ü© ‚ü®y, rfl‚ü©
    obtain ‚ü®x, rfl‚ü© := AddCon.mk'_surjective x
    obtain ‚ü®y, rfl‚ü© := AddCon.mk'_surjective y
    simp only [AddCon.coe_mk', HomogeneousSubmonoid.PreLocalizationGrading.emb_apply, AddCon.liftOn_coe,
      HomogeneousSubmonoid.PreLocalizationGrading.val_apply, Localization.mk_mul]
    refine ‚ü®AddCon.mk' _
      { num := x.num * y.num
        den := x.den * y.den
        degNum := x.degNum + y.degNum
        degDen := x.degDen + y.degDen
        num_mem := SetLike.GradedMul.mul_mem x.num_mem y.num_mem
        den_mem := SetLike.GradedMul.mul_mem x.den_mem y.den_mem
        deg_frac_eq := by
          simp only [‚Üê x.deg_frac_eq, ‚Üê y.deg_frac_eq]
          abel }, ?_‚ü©
    simp only [AddCon.coe_mk', HomogeneousSubmonoid.PreLocalizationGrading.emb_apply, AddCon.liftOn_coe,
      HomogeneousSubmonoid.PreLocalizationGrading.val_apply]

noncomputable def decomposition :
    Localization S.toSubmonoid ‚Üí+* ‚®Å i : Œπ, S.LocalizationGrading i :=
  IsLocalization.lift (M := S.toSubmonoid) (S := Localization S.toSubmonoid)
    (g := (DirectSum.toSemiring (fun i ‚Ü¶
      (DirectSum.of (fun i ‚Ü¶ S.LocalizationGrading i) i :
        S.LocalizationGrading i ‚Üí+ ‚®Å i, S.LocalizationGrading i).comp
      (‚ü®‚ü®fun x ‚Ü¶ ‚ü®Localization.mk x.1 1,
        ‚ü®AddCon.mk' _ ‚ü®x.1, 1, i, 0, x.2, SetLike.GradedOne.one_mem, by simp‚ü©, rfl‚ü©‚ü©,
        by simp only [ZeroMemClass.coe_zero, AddSubgroup.mk_eq_zero]; exact Localization.mk_zero 1‚ü©,
        by
          intro x y
          ext
          simp only [AddMemClass.coe_add, AddSubgroup.coe_add]
          exact (Localization.add_mk_self x.1 1 y.1).symm‚ü© : (ùíú i) ‚Üí+ (S.LocalizationGrading i)))
            (by
              simp only [AddMonoidHom.coe_comp, AddMonoidHom.coe_mk, ZeroHom.coe_mk,
                Function.comp_apply, SetLike.coe_gOne, Localization.mk_one]
              rfl)
            (by
              intro i j x y
              simp only [AddMonoidHom.coe_comp, AddMonoidHom.coe_mk, ZeroHom.coe_mk,
                Function.comp_apply, SetLike.coe_gMul]
              rw [DirectSum.of_mul_of]
              congr 1
              ext
              simp [Localization.mk_mul])).comp (DirectSum.decomposeRingEquiv ùíú).toRingHom)
  (by
    rintro ‚ü®x, hx‚ü©
    obtain ‚ü®i, hi‚ü© := S.homogeneous hx
    lift x to ùíú i using hi
    simp only [RingEquiv.toRingHom_eq_coe, RingHom.coe_comp, RingHom.coe_coe, Function.comp_apply,
      toSemiring_apply]
    rw [show decomposeRingEquiv ùíú x = of (fun i ‚Ü¶ ùíú i) i x from decompose_coe ùíú _]
    simp only [toAddMonoid_of, AddMonoidHom.coe_comp, AddMonoidHom.coe_mk, ZeroHom.coe_mk,
      Function.comp_apply]
    rw [isUnit_iff_exists_inv]
    use of (fun i ‚Ü¶ S.LocalizationGrading i) (-i) ‚ü®Localization.mk 1 ‚ü®x, hx‚ü©, ‚ü®AddCon.mk' _
      ‚ü®1, ‚ü®x, hx‚ü©, 0, i, SetLike.GradedOne.one_mem, x.2, by simp‚ü©, by simp‚ü©‚ü©
    simp only [of_mul_of, one_def]
    change of (fun i ‚Ü¶ S.LocalizationGrading i) (i + (-i)) ‚ü®_, _‚ü© = _
    simp only [Localization.mk_mul, mul_one, one_mul]
    simp_rw [Localization.mk_self (S := S.toSubmonoid) (a := ‚ü®x, hx‚ü©)]
    have (j : Œπ) (h : j = 0) :
        of (fun i ‚Ü¶ S.LocalizationGrading i) j
          (‚ü®1, h ‚ñ∏ one_mem S‚ü© : S.LocalizationGrading j) =
        of (fun i ‚Ü¶ S.LocalizationGrading i) 0 1 := by
      subst h; rfl

    exact this (i + (-i)) (by simp))

lemma decomposition_homogeneous_mk
    {i j : Œπ} (a : A) (ha : a ‚àà ùíú i) (b : S.toSubmonoid) (hb : b.1 ‚àà ùíú j) :
    decomposition S (Localization.mk a b) =
    of _ (i - j) ‚ü®Localization.mk a b, ‚ü®AddCon.mk' _ ‚ü®a, b, i, j, ha, hb, rfl‚ü©, rfl‚ü©‚ü© := by
  simp_rw [decomposition, Localization.mk_eq_mk', IsLocalization.lift_mk'_spec]
  simp only [RingEquiv.toRingHom_eq_coe, RingHom.coe_comp, RingHom.coe_coe, Function.comp_apply,
    toSemiring_apply]
  lift a to ùíú i
  ¬∑ exact ha
  rcases b with ‚ü®b, hb'‚ü©
  lift b to ùíú j
  ¬∑ exact hb
  erw [decompose_coe, toAddMonoid_of, decompose_coe, toAddMonoid_of]
  simp only [AddMonoidHom.coe_comp, AddMonoidHom.coe_mk, ZeroHom.coe_mk, Function.comp_apply,
    of_mul_of]
  simp_rw [‚Üê Localization.mk_eq_mk']
  change _ = of (fun i ‚Ü¶ S.LocalizationGrading i) _ ‚ü®_, _‚ü©
  simp only [Localization.mk_mul, one_mul,
    show Localization.mk (b.1 * a.1) (‚ü®b, hb'‚ü© : S.toSubmonoid) = Localization.mk a.1 1 by
    simp [Localization.mk_eq_mk_iff, Localization.r_iff_exists]]

  have (k : Œπ) (h : i = k) (x : Localization S.toSubmonoid) (hx : x ‚àà S.LocalizationGrading i):
        of (fun i ‚Ü¶ S.LocalizationGrading i) k
          (‚ü®x, h.symm ‚ñ∏ hx‚ü© : S.LocalizationGrading k) =
        of (fun i ‚Ü¶ S.LocalizationGrading i) i ‚ü®x, hx‚ü© := by
      subst h; rfl
  exact this (j + (i - j)) (by simp) (Localization.mk a 1) _ |>.symm

noncomputable instance : DirectSum.Decomposition S.LocalizationGrading where
  decompose' := LocalizationGrading.decomposition S
  left_inv x := by
    induction x using Localization.induction_on with | H x =>
    rcases x with ‚ü®a, ‚ü®b, hb‚ü©‚ü©
    simp only
    induction a using DirectSum.Decomposition.inductionOn ùíú with
    | h_zero =>
      rw [Localization.mk_zero, map_zero, map_zero]
    | @h_homogeneous i x =>
      obtain ‚ü®j, hj‚ü© := S.homogeneous hb
      rw [decomposition_homogeneous_mk S x.1 x.2 ‚ü®b, hb‚ü© hj]
      simp only [coeAddMonoidHom_of]
    | h_add a a' h h' =>
      convert congr($h + $h') using 1
      ¬∑ rw [‚Üê map_add, ‚Üê map_add, Localization.add_mk_self]
      ¬∑ rw [Localization.add_mk_self]
  right_inv x := by
    induction x using DirectSum.induction_on with
    | H_zero => simp
    | H_basic i x =>
      simp only [coeAddMonoidHom_of]
      obtain ‚ü®y, hy‚ü© := x.2
      have hy' : x = ‚ü®_, ‚ü®y, rfl‚ü©‚ü© := by ext; exact hy.symm
      rw [‚Üê hy, hy']
      clear hy hy' x
      obtain ‚ü®‚ü®a, ‚ü®b, hb‚ü©, m, n, hm, hn, H‚ü©, rfl‚ü© := AddCon.mk'_surjective y
      conv_lhs => simp only [decomposition, Localization.mk_eq_mk', RingEquiv.toRingHom_eq_coe,
        AddCon.coe_mk', PreLocalizationGrading.emb_apply, AddCon.liftOn_coe,
        PreLocalizationGrading.val_apply]
      erw [IsLocalization.lift_mk'_spec]
      simp only [RingHom.coe_comp, RingHom.coe_coe, Function.comp_apply, toSemiring_apply,
        AddCon.coe_mk', PreLocalizationGrading.emb_apply, AddCon.liftOn_coe,
        PreLocalizationGrading.val_apply]
      lift a to ùíú m
      ¬∑ exact hm
      lift b to ùíú n
      ¬∑ exact hn
      erw [decompose_coe, decompose_coe]
      simp only [‚Üê Localization.mk_eq_mk', toAddMonoid_of, AddMonoidHom.coe_comp,
        AddMonoidHom.coe_mk, ZeroHom.coe_mk, Function.comp_apply, of_mul_of]
      change _ = of (fun i ‚Ü¶ S.LocalizationGrading i) (n + i)
        ‚ü®Localization.mk _ _ * Localization.mk _ _, _‚ü©
      simp only [Localization.mk_mul, one_mul,
        show Localization.mk (b.1 * a.1) (‚ü®b, hb‚ü© : S.toSubmonoid) = Localization.mk a.1 1 by
        simp [Localization.mk_eq_mk_iff, Localization.r_iff_exists]]
      have (k : Œπ) (h : m = k) (x : Localization S.toSubmonoid) (hx : x ‚àà S.LocalizationGrading m):
          of (fun i ‚Ü¶ S.LocalizationGrading i) k
            (‚ü®x, h.symm ‚ñ∏ hx‚ü© : S.LocalizationGrading k) =
          of (fun i ‚Ü¶ S.LocalizationGrading i) m ‚ü®x, hx‚ü© := by
        subst h; rfl
      exact this (n + i) (by rw [‚Üê H]; abel) (Localization.mk a 1) _ |>.symm
    | H_plus x y hx hy =>
      simp only [map_add, hx, hy]

noncomputable instance : GradedRing S.LocalizationGrading where

end LocalizationGrading

lemma mem_localizationGrading_iff (x : Localization S.toSubmonoid) (i : Œπ) :
    x ‚àà S.LocalizationGrading i ‚Üî
    ‚àÉ (m n : Œπ) (_ : m - n = i) (a : ùíú m) (b : ùíú n) (hb : b.1 ‚àà S.toSubmonoid),
    x = Localization.mk a.1 ‚ü®b, hb‚ü© := by
  constructor
  ¬∑ rintro ‚ü®x, rfl‚ü©
    obtain ‚ü®x, rfl‚ü© := AddCon.mk'_surjective x
    exact ‚ü®x.degNum, x.degDen, x.deg_frac_eq, ‚ü®x.num, x.num_mem‚ü©, ‚ü®x.den, x.den_mem‚ü©,
      x.den.2, rfl‚ü©
  ¬∑ rintro ‚ü®m, n, rfl, ‚ü®a, ha‚ü©, ‚ü®b, hb‚ü©, hb', rfl‚ü©
    exact ‚ü®AddCon.mk' _ ‚ü®a, ‚ü®b, hb'‚ü©, m, n, ha, hb, rfl‚ü©, rfl‚ü©

end HomogeneousSubmonoid
