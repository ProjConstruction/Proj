import Project.Grading.HomogeneousSubmonoid

import Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization

suppress_compilation

namespace HomogeneousSubmonoid

variable {Œπ R A : Type*}
variable [AddCommGroup Œπ] [CommRing R] [CommRing A] [Algebra R A] {ùíú : Œπ ‚Üí Submodule R A}
variable [DecidableEq Œπ] [GradedAlgebra ùíú]
variable (S T : HomogeneousSubmonoid ùíú)

abbrev Potion := HomogeneousLocalization ùíú S.toSubmonoid

def toMul : S.Potion ‚Üí+* (S * T).Potion :=
  HomogeneousLocalization.map _ _ (RingHom.id _) (by
    erw [Submonoid.comap_id, ‚Üê le_iff]
    exact le_mul_left S T) fun i a hi ‚Ü¶ hi

@[simp]
lemma toMul_mk (x) : S.toMul T (.mk x) = .mk ‚ü®x.deg, x.num, x.den, le_mul_left _ _ x.den_mem‚ü© := rfl

instance : Algebra S.Potion (S * T).Potion := RingHom.toAlgebra (toMul S T)

def toBarPotion : S.Potion ‚Üí+* S.bar.Potion :=
  HomogeneousLocalization.map _ _ (.id A) (by
      erw [Submonoid.comap_id, ‚Üê le_iff]
      exact le_bar S) fun i a hi ‚Ü¶ hi

@[simp]
lemma toBarPotion_mk (x) :
  toBarPotion (S := S) (.mk x) = .mk
  { deg := x.deg
    num := x.num
    den := x.den
    den_mem := S.le_bar x.den_mem } := rfl

lemma toBarPotion_surjective : Function.Surjective (toBarPotion S) := by
  rintro x
  induction x using Quotient.inductionOn' with | h x =>
  rcases x with ‚ü®i, ‚ü®m, hm‚ü©, ‚ü®n, hn‚ü©, hn'‚ü©
  simp only [mem_toSubmonoid_iff, mem_bar] at hn'
  obtain ‚ü®hn', y, hy, dvd‚ü© := hn'
  obtain ‚ü®z, rfl, ‚ü®j, hz‚ü©‚ü© := SetLike.Homogeneous.exists_homogeneous_of_dvd ùíú hn'
    (S.homogeneous hy) dvd
  refine ‚ü®.mk ‚ü®i + j, ‚ü®m * z, SetLike.mul_mem_graded hm hz‚ü©,
    ‚ü®n * z, SetLike.mul_mem_graded hn hz‚ü©, hy‚ü©, ?_‚ü©
  simp only [toBarPotion_mk]
  apply Quotient.sound'
  simp only [Setoid.ker_def, HomogeneousLocalization.NumDenSameDeg.embedding,
    Localization.mk_eq_mk_iff, Localization.r_iff_exists, Subtype.exists, mem_toSubmonoid_iff,
    mem_bar, exists_prop]
  exact ‚ü®1, ‚ü®SetLike.homogeneous_one _,
    ‚ü®1, one_mem _, by rfl‚ü©‚ü©, by group‚ü©

lemma toBarPotion_injective : Function.Injective (toBarPotion S) := by
  rintro x y h
  induction x using Quotient.inductionOn' with | h x =>
  induction y using Quotient.inductionOn' with | h y =>
  rcases x with ‚ü®i, ‚ü®m, hm‚ü©, ‚ü®n, hn‚ü©, hn'‚ü©
  rcases y with ‚ü®i', ‚ü®m', hm'‚ü©, ‚ü®n', hn'‚ü©, hn''‚ü©
  simp only [mem_toSubmonoid_iff, toBarPotion_mk] at hn' hn'' h ‚ä¢
  rw [HomogeneousLocalization.mk, HomogeneousLocalization.mk, Quotient.eq'', Setoid.ker_def,
    HomogeneousLocalization.NumDenSameDeg.embedding,
    HomogeneousLocalization.NumDenSameDeg.embedding,
    Localization.mk_eq_mk_iff, Localization.r_iff_exists] at h
  obtain ‚ü®‚ü®c, ‚ü®‚ü®j, hc‚ü©, ‚ü®_, hz, ‚ü®z, rfl‚ü©‚ü©‚ü©‚ü©, eq‚ü© := h
  simp only [mem_toSubmonoid_iff, mem_bar] at hc hz eq ‚ä¢
  apply Quotient.sound'
  rw [Setoid.ker_def, HomogeneousLocalization.NumDenSameDeg.embedding,
    HomogeneousLocalization.NumDenSameDeg.embedding, Localization.mk_eq_mk_iff,
    Localization.r_iff_exists]
  simp only [Subtype.exists, mem_toSubmonoid_iff, exists_prop]
  refine ‚ü®c * z, hz, ?_‚ü©
  convert congr(z * $eq) using 1 <;> ring


def equivBarPotion : S.Potion ‚âÉ+* S.bar.Potion :=
  RingEquiv.ofBijective (toBarPotion S) ‚ü®toBarPotion_injective S, toBarPotion_surjective S‚ü©

lemma equivBarPotion_apply (x) :
  equivBarPotion S x = toBarPotion S x := rfl

lemma equivBarPotion_symm_apply
    (i j : Œπ) (m n : A) (m_mem : m ‚àà ùíú i) (n_mem : n ‚àà ùíú i) (z : A) (z_mem : z ‚àà ùíú j) (hz : n * z ‚àà S) :
    (equivBarPotion S).symm (.mk ‚ü®i, ‚ü®m, m_mem‚ü©, ‚ü®n, n_mem‚ü©, ‚ü®‚ü®i, n_mem‚ü©, ‚ü®n * z, hz, ‚ü®z, rfl‚ü©‚ü©‚ü©‚ü©) =
    .mk ‚ü®i + j, ‚ü®m * z, SetLike.mul_mem_graded m_mem z_mem‚ü©,
      ‚ü®n * z, SetLike.mul_mem_graded n_mem z_mem‚ü©, hz‚ü© := by
    apply_fun S.equivBarPotion
    simp only [RingEquiv.apply_symm_apply, equivBarPotion_apply, toBarPotion_mk]
    apply Quotient.sound'
    rw [Setoid.ker_def, HomogeneousLocalization.NumDenSameDeg.embedding,
      HomogeneousLocalization.NumDenSameDeg.embedding, Localization.mk_eq_mk_iff,
      Localization.r_iff_exists]
    refine ‚ü®1, ?_‚ü©
    simp only [OneMemClass.coe_one, one_mul]
    ring


instance : Algebra S.Potion S.bar.Potion :=
  RingHom.toAlgebra S.equivBarPotion

def localizationToPotion
    (T' : Set A)
    (T'_gen : Submonoid.closure T' = T.toSubmonoid)
    (n : T' ‚Üí ‚Ñï) (s s' : T' ‚Üí A)
    (s_mem_bar : ‚àÄ t, s t ‚àà S.bar) (s'_mem_bar : ‚àÄ t, s' t ‚àà S.bar)
    (i i' : T' ‚Üí Œπ)
    (t_deg : ‚àÄ t : T', (t : A)^(n t) ‚àà ùíú (i t - i' t))
    (s_deg : ‚àÄ t, s t ‚àà ùíú (i t)) (s'_deg : ‚àÄ t, s' t ‚àà ùíú (i' t)) :
    Localization (Submonoid.closure {x | ‚àÉ (t : T'), x =
      .mk { deg := i t
            num := ‚ü®t ^ n t * s' t, by simpa using SetLike.mul_mem_graded (t_deg t) (s'_deg t)‚ü©
            den := ‚ü®s t, s_deg t‚ü©
            den_mem := s_mem_bar t } } : Submonoid S.bar.Potion) ‚Üí+*
    (S * T).Potion :=
  @IsLocalization.lift
    (R := S.bar.Potion)
    (M :=  _)
    (S :=  _)
    (P := (S * T).Potion)
    (g := (RingHom.comp (S.toMul T) S.equivBarPotion.symm)) _ _ _ _
    (Localization.isLocalization (R := S.bar.Potion) (M := (Submonoid.closure {x | ‚àÉ (t : T'), x =
      .mk { deg := i t
            num := ‚ü®t ^ n t * s' t, by simpa using SetLike.mul_mem_graded (t_deg t) (s'_deg t)‚ü©
            den := ‚ü®s t, s_deg t‚ü©
            den_mem := s_mem_bar t } } : Submonoid S.bar.Potion))) <| by
    rintro ‚ü®y, hy‚ü©
    simp only [RingHom.coe_comp, RingHom.coe_coe, Function.comp_apply]
    refine Submonoid.closure_induction (hx := hy) ?_ ?_ ?_
    ¬∑ rintro x hx
      simp only [Subtype.exists, Set.mem_setOf_eq] at hx
      obtain ‚ü®t, ht, rfl‚ü© := hx
      let i := i ‚ü®t, ht‚ü©
      let i' := i' ‚ü®t, ht‚ü©
      let n := n ‚ü®t, ht‚ü©
      let s := s ‚ü®t, ht‚ü©
      let s' := s' ‚ü®t, ht‚ü©
      have s_mem_bar' : s ‚àà S.bar := s_mem_bar ‚ü®t, ht‚ü©
      have s_mem_bar : s ‚àà S.bar := s_mem_bar ‚ü®t, ht‚ü©
      have s'_mem_bar' : s' ‚àà S.bar := s'_mem_bar ‚ü®t, ht‚ü©
      have s'_mem_bar : s' ‚àà S.bar := s'_mem_bar ‚ü®t, ht‚ü©
      simp only [mem_bar] at s_mem_bar' s'_mem_bar'
      obtain ‚ü®s_hom, y, hy, dvd‚ü© := s_mem_bar'
      obtain ‚ü®s'_hom, y', hy', dvd'‚ü© := s'_mem_bar'
      obtain ‚ü®z, rfl, ‚ü®j, hj‚ü©‚ü© := SetLike.Homogeneous.exists_homogeneous_of_dvd ùíú s_hom (S.2 hy) dvd
      obtain ‚ü®z', rfl, ‚ü®j', hj'‚ü©‚ü© := SetLike.Homogeneous.exists_homogeneous_of_dvd ùíú s'_hom (S.2 hy') dvd'
      have t_deg : (t : A)^(n) ‚àà ùíú (i - i') := t_deg ‚ü®t, ht‚ü©
      have s_deg : s ‚àà ùíú i := s_deg ‚ü®t, ht‚ü©
      have s'_deg : s' ‚àà ùíú i' := s'_deg ‚ü®t, ht‚ü©
      change IsUnit <| S.toMul T <| S.equivBarPotion.symm <| .mk ‚ü®i, ‚ü®t^n * s', _‚ü©, ‚ü®s, _‚ü©, _‚ü©
      rw [equivBarPotion_symm_apply (z_mem := hj) (hz := hy), toMul_mk]
      simp only [eq_mp_eq_cast]
      refine isUnit_of_mul_eq_one _ (.mk ‚ü®i + j', ‚ü®s * z', SetLike.mul_mem_graded s_deg hj'‚ü©,
        ‚ü®t ^ n * s' * z',
          SetLike.mul_mem_graded (by simpa using SetLike.mul_mem_graded t_deg s'_deg) hj'‚ü©,
        ‚ü®s' * z', hy', t^n, pow_mem (T'_gen ‚ñ∏ Submonoid.subset_closure ht) _, by ring‚ü©‚ü©) ?_
      rw [‚Üê HomogeneousLocalization.mk_mul, HomogeneousLocalization.one_eq]
      apply Quotient.sound'
      simp only [Setoid.ker_def, HomogeneousLocalization.NumDenSameDeg.embedding, eq_mp_eq_cast,
        Nat.rawCast.eq_1, Nat.cast_id, Nat.add_zero, HomogeneousLocalization.NumDenSameDeg.deg_mul,
        HomogeneousLocalization.NumDenSameDeg.num_mul,
        HomogeneousLocalization.NumDenSameDeg.den_mul,
        HomogeneousLocalization.NumDenSameDeg.deg_one,
        HomogeneousLocalization.NumDenSameDeg.num_one,
        HomogeneousLocalization.NumDenSameDeg.den_one, Localization.mk_eq_mk_iff,
        Localization.r_iff_exists, one_mul, mul_one, Subtype.exists, mem_toSubmonoid_iff,
        exists_prop]
      exact ‚ü®1, one_mem _, by ring‚ü©
    ¬∑ simp only [map_one, isUnit_one]
    ¬∑ intro x y hx hy ihx ihy
      simp only [map_mul, IsUnit.mul_iff]
      tauto



end HomogeneousSubmonoid
