import Project.HomogeneousSubmonoid.Basic
open DirectSum TensorProduct
open scoped NNReal

variable {Œπ A œÉ : Type*}
variable [AddCommGroup Œπ] [CommRing A] [SetLike œÉ A] {ùíú : Œπ ‚Üí œÉ}
variable [DecidableEq Œπ] [AddSubgroupClass œÉ A] [GradedRing ùíú]

namespace HomogeneousSubmonoid

variable (S : HomogeneousSubmonoid ùíú)

noncomputable def convDegEmbedding : (‚Ñù‚â•0 ‚äó[‚Ñï] S.deg) ‚Üí‚Çó[‚Ñù‚â•0] (‚Ñù ‚äó[‚Ñ§] Œπ) :=
  TensorProduct.AlgebraTensorModule.lift
    { toFun r :=
        { toFun i := r.1 ‚äó‚Çú i.1
          map_add' x y := by simp [‚Üê tmul_add]
          map_smul' s x := by
            simp only [NNReal.val_eq_coe, AddSubmonoidClass.coe_nsmul, eq_natCast, Nat.cast_id]
            rw [smul_tmul']
            erw [show s ‚Ä¢ r.1 = (s : ‚Ñ§) ‚Ä¢ r.1 from rfl]
            rw [smul_tmul]
            congr 1
            simp }
      map_add' r s := by ext; simp [add_tmul]
      map_smul' r s := by
        ext
        simp only [smul_eq_mul, NNReal.val_eq_coe, NNReal.coe_mul, LinearMap.coe_mk,
          AddHom.coe_mk, RingHom.id_apply, LinearMap.smul_apply, smul_tmul']
        rfl }

@[simp]
lemma convDegEmbedding_apply_tmul (r : ‚Ñù‚â•0) (i : S.deg) :
    convDegEmbedding S (r ‚äó‚Çú i) = r.1 ‚äó‚Çú i.1 := rfl

noncomputable def convDeg : Submodule ‚Ñù‚â•0 (‚Ñù ‚äó[‚Ñ§] Œπ) := LinearMap.range (convDegEmbedding S)

noncomputable def convDeg' : Submodule ‚Ñù‚â•0 (‚Ñù ‚äó[‚Ñ§] Œπ) :=
  Submodule.span ‚Ñù‚â•0 {x | ‚àÉ (a : ‚Ñù‚â•0) (i : Œπ) (_ : i ‚àà S.deg) , x = a.1 ‚äó‚Çú i }

scoped notation:max Œπ"["S"‚ü©‚Ñù‚â•0" => convDeg (Œπ := Œπ) S

lemma mem_convDeg [Nontrivial A] (x) :
    x ‚àà Œπ[S‚ü©‚Ñù‚â•0 ‚Üî
    ‚àÉ (s : Œπ ‚Üí‚ÇÄ ‚Ñù‚â•0), (‚àÄ i ‚àà s.support, i ‚àà S.deg) ‚àß x = ‚àë i ‚àà s.support, (s i).1 ‚äó‚Çú i := by
  classical
  fconstructor
  ¬∑ rintro ‚ü®x, rfl‚ü©
    induction x using TensorProduct.induction_on with
    | zero =>
      refine ‚ü®0, ?_, by simp‚ü©
      intro i hi
      simp only [Finsupp.support_zero, Finset.not_mem_empty] at hi
    | tmul a i =>
      rcases i with ‚ü®i, hi‚ü©
      refine ‚ü®Finsupp.single i a, ?_, ?_‚ü©
      ¬∑ intro i hi
        simp only [Finsupp.mem_support_iff, Finsupp.single_apply, ne_eq, ite_eq_right_iff,
          Classical.not_imp] at hi
        rwa [‚Üê hi.1]
      simp only [convDegEmbedding_apply_tmul, NNReal.val_eq_coe]
      rw [eq_comm, Finset.sum_eq_single i]
      ¬∑ simp
      ¬∑ intro j hj H
        simp [Finsupp.single_eq_of_ne H.symm]
      aesop
    | add x y ihx ihy =>
      obtain ‚ü®s,hs, eq‚ü© := ihx
      obtain ‚ü®t, ht, eq'‚ü© := ihy
      simp only [NNReal.val_eq_coe, Finsupp.mem_support_iff, ne_eq, map_add] at eq eq' ‚ä¢
      simp_rw [eq, eq']
      refine ‚ü®s + t, ‚ü®?_, ?_‚ü©‚ü©
      ¬∑ intro j hj
        simp only [Finsupp.mem_support_iff, ne_eq, Finsupp.coe_add, Pi.add_apply,
          AddLeftCancelMonoid.add_eq_zero, not_and] at hs ht hj
        tauto
      simp only [Finsupp.coe_add, Pi.add_apply, NNReal.coe_add, add_tmul, Finset.sum_add_distrib]
      nth_rewrite 1 [show (s + t).support = s.support ‚à™ ((s + t).support \ s.support) by
        ext; aesop]
      nth_rewrite 2 [show (s + t).support = t.support ‚à™ ((s + t).support \ t.support) by
        ext; aesop]
      rw [Finset.sum_union_eq_left, Finset.sum_union_eq_left]
      ¬∑ aesop
      ¬∑ intro a ha ha'
        simp only [Finsupp.mem_support_iff, ne_eq, Decidable.not_not] at ha'
        simp only [ha', NNReal.coe_zero, zero_tmul]
  ¬∑ rintro ‚ü®a, ha, hi, rfl‚ü©
    refine Submodule.sum_mem _ fun i hi => ?_
    exact ‚ü®a i ‚äó‚Çú[‚Ñï] ‚ü®i, ha i hi‚ü©, rfl‚ü©

end HomogeneousSubmonoid
