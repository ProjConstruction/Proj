import Project.Grading.Localization
import Project.Grading.GradedRingHom

suppress_compilation

open scoped Graded

variable {Œπ A œÉ : Type*}
variable [AddCommGroup Œπ] [CommRing A] [SetLike œÉ A] {ùíú : Œπ ‚Üí œÉ}
variable [DecidableEq Œπ] [AddSubgroupClass œÉ A] [GradedRing ùíú]

namespace HomogeneousSubmonoid

variable (S : HomogeneousSubmonoid ùíú)

def localizationToLocalizationBar : Localization S.toSubmonoid ‚Üí+* Localization S.bar.toSubmonoid :=
IsLocalization.lift
  (M := S.toSubmonoid) (R := A) (S := Localization S.toSubmonoid) (g := algebraMap _ _) <| by
  intro s
  refine ‚ü®‚ü®_, .mk 1 ‚ü®s, S.le_bar s.2‚ü©, ?_, ?_‚ü©, rfl‚ü© <;>
  ¬∑ simp only [‚Üê Localization.mk_one_eq_algebraMap, Localization.mk_mul, mul_one, one_mul]
    exact Localization.mk_self (‚ü®s, S.le_bar s.2‚ü© : S.bar.toSubmonoid)

@[simp]
lemma localizationToLocalizationBar_mk (a : A) (s : S.toSubmonoid) :
    S.localizationToLocalizationBar (Localization.mk a s) = Localization.mk a ‚ü®s, S.le_bar s.2‚ü© := by
  delta localizationToLocalizationBar
  rw [Localization.mk_eq_mk', IsLocalization.lift_mk', Units.mul_inv_eq_iff_eq_mul,
    IsUnit.coe_liftRight]
  simp only [‚Üê Localization.mk_one_eq_algebraMap, RingHom.toMonoidHom_eq_coe,
    MonoidHom.restrict_apply, MonoidHom.coe_coe, Localization.mk_mul, mul_one]
  rw [Localization.mk_eq_mk_iff, Localization.r_iff_exists]
  refine ‚ü®1, ?_‚ü©
  simp only [OneMemClass.coe_one, mul_comm, mul_one]

def localizationBarToLocalization : Localization S.bar.toSubmonoid ‚Üí+* Localization S.toSubmonoid :=
IsLocalization.lift
  (M := S.bar.toSubmonoid) (R := A) (S := Localization S.bar.toSubmonoid) (g := algebraMap _ _) <| by
  rintro ‚ü®s, hs‚ü©
  simp only [bar, Submonoid.mem_mk, Subsemigroup.mem_mk, Set.mem_setOf_eq] at hs
  obtain ‚ü®-, y, hy, hdvd‚ü© := hs
  obtain ‚ü®z, rfl, hz‚ü© := SetLike.Homogeneous.exists_homogeneous_of_dvd ùíú
    (S.bar.homogeneous hs) (S.homogeneous hy) hdvd
  refine ‚ü®‚ü®_, .mk z ‚ü®_, hy‚ü©, ?_, ?_‚ü©, rfl‚ü©
  ¬∑ simp only [‚Üê Localization.mk_one_eq_algebraMap, Localization.mk_mul, mul_one, one_mul]
    exact Localization.mk_self (‚ü®_, hy‚ü© : S.toSubmonoid)
  ¬∑ simp only [‚Üê Localization.mk_one_eq_algebraMap, Localization.mk_mul, mul_one, one_mul]
    rw [mul_comm]
    exact Localization.mk_self (‚ü®_, hy‚ü© : S.toSubmonoid)

lemma localizationBarToLocalization_mk (a z : A)
      (s : S.bar.toSubmonoid) (hz : s * z ‚àà S.toSubmonoid) :
    S.localizationBarToLocalization (Localization.mk a s) =
    Localization.mk (a * z) ‚ü®s * z, hz‚ü© := by
  delta localizationBarToLocalization
  rw [Localization.mk_eq_mk', IsLocalization.lift_mk', Units.mul_inv_eq_iff_eq_mul,
    IsUnit.coe_liftRight]
  simp only [‚Üê Localization.mk_one_eq_algebraMap, RingHom.toMonoidHom_eq_coe,
    MonoidHom.restrict_apply, MonoidHom.coe_coe, Localization.mk_mul, mul_one]
  rw [Localization.mk_eq_mk_iff, Localization.r_iff_exists]
  refine ‚ü®1, ?_‚ü©
  simp only [OneMemClass.coe_one, one_mul]
  ring

@[simp]
lemma localizationBarToLocalization_mk' (a : A) (s : S.toSubmonoid) :
    S.localizationBarToLocalization (Localization.mk a ‚ü®s, S.le_bar s.2‚ü©) =
    Localization.mk a s := by
  delta localizationBarToLocalization
  rw [Localization.mk_eq_mk', IsLocalization.lift_mk', Units.mul_inv_eq_iff_eq_mul,
    IsUnit.coe_liftRight]
  simp only [‚Üê Localization.mk_one_eq_algebraMap, RingHom.toMonoidHom_eq_coe,
    MonoidHom.restrict_apply, MonoidHom.coe_coe, Localization.mk_mul, mul_one]
  rw [Localization.mk_eq_mk_iff, Localization.r_iff_exists]
  refine ‚ü®1, ?_‚ü©
  simp only [OneMemClass.coe_one, one_mul]
  ring

def localizationEquivLocalizationBar : S.LocalizationGrading ‚âÉ+* S.bar.LocalizationGrading where
  __ := S.localizationToLocalizationBar
  invFun := S.localizationBarToLocalization
  left_inv := by
    intro x
    induction x using Localization.induction_on with | H x => simp
  right_inv := by
    intro x
    induction x using Localization.induction_on with | H x =>
    rcases x with ‚ü®a, s, hs‚ü©
    simp only [RingHom.toMonoidHom_eq_coe, OneHom.toFun_eq_coe, MonoidHom.toOneHom_coe,
      MonoidHom.coe_coe]
    simp only [bar, Submonoid.mem_mk, Subsemigroup.mem_mk, Set.mem_setOf_eq] at hs
    obtain ‚ü®hs', y, hy1, hy2‚ü© := hs
    obtain ‚ü®z, rfl, hz‚ü© := SetLike.Homogeneous.exists_homogeneous_of_dvd ùíú
      (S.bar.homogeneous hs) (S.homogeneous hy1) hy2
    rw [localizationBarToLocalization_mk (hz := hy1)]
    simp only [localizationToLocalizationBar_mk]
    rw [Localization.mk_eq_mk_iff, Localization.r_iff_exists]
    refine ‚ü®1, ?_‚ü©
    simp only [OneMemClass.coe_one, one_mul]
    ring
  map_mem' := by
    rintro i x hx
    simp only [RingHom.toMonoidHom_eq_coe, OneHom.toFun_eq_coe, MonoidHom.toOneHom_coe,
      MonoidHom.coe_coe]
    rw [mem_localizationGrading_iff] at hx
    obtain ‚ü®m, n, hmn, a, b, hb, rfl‚ü© := hx
    simp only [localizationToLocalizationBar_mk]
    rw [mem_localizationGrading_iff]
    exact ‚ü®m, n, hmn, a, b, S.le_bar hb, rfl‚ü©
  inv_mem' := by
    intro i x hx
    simp only
    rw [mem_localizationGrading_iff] at hx
    obtain ‚ü®m, n, hmn, ‚ü®a, a_mem‚ü©, ‚ü®b, b_mem‚ü©, hb, rfl‚ü© := hx
    simp only [bar, Submonoid.mem_mk, Subsemigroup.mem_mk, Set.mem_setOf_eq] at hb
    obtain ‚ü®-, y, hy1, hdvd‚ü© := hb
    obtain ‚ü®z, rfl, hz‚ü© := SetLike.Homogeneous.exists_homogeneous_of_dvd ùíú
      (S.bar.homogeneous hb) (S.homogeneous hy1) hdvd
    rw [localizationBarToLocalization_mk (hz := hy1)]
    simp only
    obtain ‚ü®k, hk‚ü© := hz
    rw [mem_localizationGrading_iff]
    exact ‚ü®m + k, n + k, by rw [‚Üê hmn]; abel, ‚ü®a * z, SetLike.mul_mem_graded a_mem hk‚ü©,
      ‚ü®b * z, SetLike.mul_mem_graded b_mem hk‚ü©, hy1, rfl‚ü©

@[simp]
lemma localizationEquivLocalizationBar_apply (x) :
    S.localizationEquivLocalizationBar x = S.localizationToLocalizationBar x := rfl

@[simp]
lemma localizationEquivLocalizationBar_symm_apply (x) :
    S.localizationEquivLocalizationBar.symm x = S.localizationBarToLocalization x := rfl

end HomogeneousSubmonoid
