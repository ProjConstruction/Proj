import Project.Proj.Opens
import Project.Proj.Over
import Project.Proj.Stalk
import Project.ForMathlib.SchemeIsOpenImmersion
import Project.ForMathlib.Ideal

import Mathlib.AlgebraicGeometry.Over
import Mathlib.AlgebraicGeometry.Morphisms.OpenImmersion

suppress_compilation

open AlgebraicGeometry CategoryTheory CategoryTheory.Limits Opposite
open TopologicalSpace Topology

namespace GoodPotionIngredient

universe u
variable {œÑ œÑ' Œπ R‚ÇÄ A : Type u}
variable [AddCommGroup Œπ] [CommRing R‚ÇÄ] [CommRing A] [Algebra R‚ÇÄ A] {ùíú : Œπ ‚Üí Submodule R‚ÇÄ A}
variable [DecidableEq Œπ] [GradedAlgebra ùíú]

variable {‚Ñ± : œÑ ‚Üí GoodPotionIngredient ùíú} {‚Ñ±' : œÑ' ‚Üí GoodPotionIngredient ùíú}

variable (‚Ñ± ‚Ñ±') in
structure LE_ where
  (t : œÑ ‚Ü™ œÑ')
  (comp : ‚Ñ±' ‚àò t = ‚Ñ±)

instance : FunLike (LE_ ‚Ñ± ‚Ñ±') œÑ œÑ' where
  coe le := le.t
  coe_injective' := by
    rintro ‚ü®‚ü®t, ht‚ü©, comp‚ü© ‚ü®‚ü®t', ht'‚ü©, comp'‚ü© rfl
    rfl

@[simp]
lemma LE_.comp_apply (le : LE_ ‚Ñ± ‚Ñ±') (i : œÑ) : ‚Ñ±' (le i) = ‚Ñ± i := by
  have := le.comp
  rw [funext_iff] at this
  exact this i

def LE_.potionEquivMap (le : LE_ ‚Ñ± ‚Ñ±') (i : œÑ) : (‚Ñ±' (le i)).Potion ‚âÉ+* (‚Ñ± i).Potion :=
  RingEquiv.ofHomInv
    (HomogeneousLocalization.map _ _ (RingHom.id _) (by erw [Submonoid.comap_id]; simp) (by simp) :
      (‚Ñ±' (le i)).Potion ‚Üí+* (‚Ñ± i).Potion)
    (HomogeneousLocalization.map _ _ (RingHom.id _) (by erw [Submonoid.comap_id]; simp) (by simp) :
      (‚Ñ± i).Potion ‚Üí+* (‚Ñ±' (le i)).Potion)
     (by ext x; induction x using Quotient.inductionOn' with | h x => rfl)
     (by ext x; induction x using Quotient.inductionOn' with | h x => rfl)

lemma LE_.potionEquivMap_comp (le : LE_ ‚Ñ± ‚Ñ±') (i j : œÑ) :
      ((‚Ñ± i).potionToMul (‚Ñ± j).1).comp (le.potionEquivMap i).toRingHom =
      (HomogeneousLocalization.map _ _ (RingHom.id _) (by erw [Submonoid.comap_id]; simp) (by simp)).comp
        ((‚Ñ±' (le i)).potionToMul (‚Ñ±' (le j)).1) := by
    ext x
    induction x using Quotient.inductionOn' with | h x =>
    rfl

@[reassoc]
lemma LE_.f_comp_potionEquivMap (le : LE_ ‚Ñ± ‚Ñ±') (j j' : œÑ) :
  (glueData ‚Ñ±').f (le j) (le j') ‚â´ Spec.map (CommRingCat.ofHom (le.potionEquivMap j).symm.toRingHom) =
  ((Spec.map <| CommRingCat.ofHom (HomogeneousLocalization.map _ _ (RingHom.id _)
    (by erw [Submonoid.comap_id]; simp) (by simp))) ‚â´ (glueData ‚Ñ±).f j j') := by
  simp only [glueData_J, glueData_V, mul_toHomogeneousSubmonoid,
    HomogeneousSubmonoid.mul_toSubmonoid, glueData_U, glueData_f, RingEquiv.toRingHom_eq_coe, ‚Üê
    Spec.map_comp, ‚Üê CommRingCat.ofHom_comp]
  congr 2
  ext x
  induction x using Quotient.inductionOn' with | h x =>
  rfl

@[reassoc]
lemma LE_.t_comp (le : LE_ ‚Ñ± ‚Ñ±') (j j' : œÑ) :
  (glueData ‚Ñ±').t (le j) (le j') ‚â´
    Spec.map (CommRingCat.ofHom (HomogeneousLocalization.map _ _ (RingHom.id _)
    (by erw [Submonoid.comap_id]; simp) (by simp))) =
  ((Spec.map <| CommRingCat.ofHom (HomogeneousLocalization.map _ _ (RingHom.id _)
    (by erw [Submonoid.comap_id]; simp) (by simp))) ‚â´ (glueData ‚Ñ±).t j j') := by
  simp only [glueData_J, glueData_V, mul_toHomogeneousSubmonoid,
    HomogeneousSubmonoid.mul_toSubmonoid, glueData_t, RingEquiv.toRingHom_eq_coe, ‚Üê Spec.map_comp, ‚Üê
    CommRingCat.ofHom_comp]
  congr 2
  ext x
  induction x using Quotient.inductionOn' with | h x =>
  rfl

def projHomOfLE (le : LE_ ‚Ñ± ‚Ñ±') : Proj ‚Ñ± ‚ü∂ Proj ‚Ñ±' :=
  Multicoequalizer.desc _ _
    (fun i ‚Ü¶ Spec.map (CommRingCat.ofHom <| le.potionEquivMap i) ‚â´ (glueData ‚Ñ±').Œπ (le i)) <| by
    rintro ‚ü®i, j‚ü©
    simp only [GlueData.diagram_left, GlueData.diagram_right]
    change (Spec.map _) ‚â´ _ = (Spec.map _ ‚â´ Spec.map _) ‚â´ _
    simp only [mul_toHomogeneousSubmonoid, HomogeneousSubmonoid.mul_toSubmonoid, ‚Üê Spec.map_comp,
      RingEquiv.toRingHom_eq_coe]
    have : Spec.map _ ‚â´ Spec.map _ ‚â´ _ = Spec.map _ ‚â´ _ :=
      (glueData ‚Ñ±').glue_condition (le i) (le j)
    dsimp only at this
    rw [‚Üê Spec.map_comp_assoc, ‚Üê CommRingCat.ofHom_comp] at this
    rw [‚Üê Spec.map_comp_assoc, ‚Üê Spec.map_comp_assoc, ‚Üê CommRingCat.ofHom_comp,
      ‚Üê CommRingCat.ofHom_comp, ‚Üê CommRingCat.ofHom_comp]
    dsimp only [GlueData.diagram, glueData_J, glueData_V, mul_toHomogeneousSubmonoid,
      HomogeneousSubmonoid.mul_toSubmonoid, glueData_U, glueData_f, glueData_t]
    conv_rhs => rw [RingHom.comp_assoc]
    erw [LE_.potionEquivMap_comp]
    simp only [mul_toHomogeneousSubmonoid, HomogeneousSubmonoid.mul_toSubmonoid,
      RingEquiv.toRingHom_eq_coe, CommRingCat.ofHom_comp, Spec.map_comp, Category.assoc,
      glueData_J] at this ‚ä¢
    rw [‚Üê this]
    rw [‚Üê Spec.map_comp_assoc, ‚Üê Spec.map_comp_assoc, ‚Üê Spec.map_comp_assoc, ‚Üê Spec.map_comp_assoc,
      ‚Üê CommRingCat.ofHom_comp, ‚Üê CommRingCat.ofHom_comp, ‚Üê CommRingCat.ofHom_comp,
      ‚Üê CommRingCat.ofHom_comp]
    congr 3
    ext x
    induction x using Quotient.inductionOn' with | h x =>
    rfl

@[reassoc (attr := simp)]
lemma projHomOfLE_comp_Œπ (le : LE_ ‚Ñ± ‚Ñ±')  (i : œÑ) :
    (glueData ‚Ñ±).Œπ i ‚â´ projHomOfLE le =
    Spec.map (CommRingCat.ofHom <| le.potionEquivMap i) ‚â´ (glueData ‚Ñ±').Œπ (le i) := by
  erw [Multicoequalizer.œÄ_desc]

@[simp]
lemma projHomOfLE_comp_Œπ_base (le : LE_ ‚Ñ± ‚Ñ±') (i : œÑ) :
    ((glueData ‚Ñ±).Œπ i).base ‚â´ (projHomOfLE le).base =
    (Spec.map (CommRingCat.ofHom <| le.potionEquivMap i)).base ‚â´ ((glueData ‚Ñ±').Œπ (le i)).base := by
  ext x
  exact congr($(projHomOfLE_comp_Œπ ..).base x)

@[simp]
lemma projHomOfLE_comp_Œπ_base' (le : LE_ ‚Ñ± ‚Ñ±') (i : œÑ) :
    (projHomOfLE le).base ‚àò ((glueData ‚Ñ±).Œπ i).base =
    ((glueData ‚Ñ±').Œπ (le i)).base ‚àò (Spec.map (CommRingCat.ofHom <| le.potionEquivMap i)).base := by
  ext x
  exact congr($(projHomOfLE_comp_Œπ ..).base x)

@[simp]
lemma projHomOfLE_comp_Œπ_base_apply (le : LE_ ‚Ñ± ‚Ñ±') (i : œÑ) (x : Spec (CommRingCat.of (‚Ñ± i).Potion)) :
    (projHomOfLE le).base (((glueData ‚Ñ±).Œπ i).base x) =
    ((glueData ‚Ñ±').Œπ (le i)).base ((Spec.map (CommRingCat.ofHom <| le.potionEquivMap i)).base x) := by
  exact congr($(projHomOfLE_comp_Œπ ..).base x)

@[reassoc]
lemma projHomOfLE_stalkMap_aux (le : LE_ ‚Ñ± ‚Ñ±') (i : œÑ) (x : Spec (CommRingCat.of (‚Ñ± i).Potion)) :
    Scheme.Hom.stalkMap (projHomOfLE le) (((glueData ‚Ñ±).Œπ i).base x) ‚â´ (stalkIso ‚Ñ± i x).hom =
    (TopCat.Presheaf.stalkCongr _ (by simp only [projHomOfLE_comp_Œπ_base_apply]; rfl)).hom ‚â´
    (stalkIso ‚Ñ±' (le i) ((Spec.map (CommRingCat.ofHom <| le.potionEquivMap i)).base x)).hom ‚â´
    Scheme.Hom.stalkMap _ _ := by
  simp only [stalkIso, asIso_hom]
  erw [‚Üê Scheme.Hom.stalkMap_comp]
  apply TopCat.Presheaf.stalk_hom_ext

  intro U hxU
  simp only [glueData_U, Scheme.comp_coeBase, TopCat.comp_app, TopCat.Presheaf.stalkCongr_hom,
    TopCat.Presheaf.germ_stalkSpecializes_assoc]
  erw [PresheafedSpace.stalkMap_germ_assoc]
  simp only [TopCat.Presheaf.pushforward_obj_obj]
  have := PresheafedSpace.stalkMap_germ ((glueData ‚Ñ±).Œπ i ‚â´ projHomOfLE le).toLRSHom.toShHom
    U x hxU
  erw [this]
  change ((glueData ‚Ñ±).Œπ i ‚â´ projHomOfLE le).c.app _ ‚â´ ((glueData ‚Ñ±).U i).presheaf.germ _ _ _ = _
  have : ((glueData ‚Ñ±).Œπ i ‚â´ projHomOfLE le).c.app (op U) =
    ((glueData ‚Ñ±').Œπ (le i)).c.app (op U) ‚â´ (by
      let f : Spec (CommRingCat.of (‚Ñ± i).Potion) ‚ü∂ Spec (CommRingCat.of (‚Ñ±' (le i)).Potion) :=
        Spec.map (CommRingCat.ofHom (le.potionEquivMap i))
      refine f.c.app (op ((Opens.map ((glueData ‚Ñ±').Œπ (le i)).base).obj U)) ‚â´
        (Spec (CommRingCat.of (‚Ñ± i).Potion)).presheaf.map (eqToHom ?_)
      simp only [glueData_U, Functor.op_obj, projHomOfLE_comp_Œπ, Scheme.comp_coeBase,
        Opens.map_comp_obj, op.injEq]
      rfl) := by
    have := projHomOfLE_comp_Œπ le i
    rw [Scheme.Hom.ext_iff] at this
    obtain ‚ü®h_base, h_app‚ü© := this
    have := h_app U
    simp only [glueData_U, Scheme.comp_coeBase, Opens.map_comp_obj, Scheme.Hom.app, Scheme.comp_app,
      eqToHom_op, Category.assoc, TopCat.Presheaf.pushforward_obj_obj, Functor.op_obj] at this ‚ä¢
    conv_rhs => rw [‚Üê Category.assoc]
    rw [‚Üê this]
    simp
  rw [this]
  simp

lemma projHomOfLE_stalkMap_eq (le : LE_ ‚Ñ± ‚Ñ±') (i : œÑ) (x : Spec (CommRingCat.of (‚Ñ± i).Potion)) :
    Scheme.Hom.stalkMap (projHomOfLE le) (((glueData ‚Ñ±).Œπ i).base x) =
    (TopCat.Presheaf.stalkCongr _ (by simp only [projHomOfLE_comp_Œπ_base_apply]; rfl)).hom ‚â´
    (stalkIso ‚Ñ±' (le i) ((Spec.map (CommRingCat.ofHom <| le.potionEquivMap i)).base x)).hom ‚â´
    Scheme.Hom.stalkMap _ _ ‚â´ (stalkIso ‚Ñ± i x).inv := by
  rw [‚Üê projHomOfLE_stalkMap_aux_assoc]
  simp

lemma projHomOfLE_base_injective (le : LE_ ‚Ñ± ‚Ñ±') :
    Function.Injective (projHomOfLE le).base := by
  intro x x' h
  obtain ‚ü®j, x, rfl‚ü© := (glueData ‚Ñ±).Œπ_jointly_surjective x
  obtain ‚ü®j', x', rfl‚ü© := (glueData ‚Ñ±).Œπ_jointly_surjective x'
  rw [projHomOfLE_comp_Œπ_base_apply, projHomOfLE_comp_Œπ_base_apply] at h
  let X := (Spec.map (CommRingCat.ofHom (le.potionEquivMap j).toRingHom)).base x
  have eq_X : x = (Spec.map (CommRingCat.ofHom (le.potionEquivMap j).symm.toRingHom)).base X := by
    simp only [glueData_U, RingEquiv.toRingHom_eq_coe, X]
    change x = (Spec.map _ ‚â´ Spec.map _).base x
    rw [‚Üê Spec.map_comp, ‚Üê CommRingCat.ofHom_comp]
    simp
  rw [eq_X] at *
  let X' := (Spec.map (CommRingCat.ofHom (le.potionEquivMap j').toRingHom)).base x'
  have eq_X' : x' = (Spec.map (CommRingCat.ofHom (le.potionEquivMap j').symm.toRingHom)).base X' := by
    simp only [glueData_U, RingEquiv.toRingHom_eq_coe, X']
    change x' = (Spec.map _ ‚â´ Spec.map _).base x'
    rw [‚Üê Spec.map_comp, ‚Üê CommRingCat.ofHom_comp]
    simp
  rw [eq_X'] at *
  change ((glueData ‚Ñ±').Œπ (le j)).base X = ((glueData ‚Ñ±').Œπ (le j')).base X' at h
  clear_value X X'
  clear eq_X eq_X' x x'
  rw [Scheme.GlueData.Œπ_eq_iff] at h
  obtain eq|‚ü®y, h‚ÇÅ, h‚ÇÇ‚ü© := h
  ¬∑ simp only [glueData_J, glueData_U, Sigma.mk.inj_iff, Subtype.mk.injEq] at eq
    rcases eq with ‚ü®eq‚ÇÅ, eq‚ÇÇ‚ü©
    replace eq‚ÇÅ := le.t.2 eq‚ÇÅ
    subst eq‚ÇÅ
    simp only [heq_eq_eq] at eq‚ÇÇ
    subst eq‚ÇÇ
    rfl
  simp only at h‚ÇÅ h‚ÇÇ
  rw [‚Üê h‚ÇÅ, ‚Üê h‚ÇÇ]
  erw [‚Üê comp_apply, ‚Üê comp_apply, ‚Üê comp_apply, ‚Üê comp_apply, ‚Üê Scheme.comp_coeBase,
    ‚Üê Scheme.comp_coeBase, ‚Üê Scheme.comp_coeBase, ‚Üê Scheme.comp_coeBase, ]
  rw [‚Üê Category.assoc, LE_.f_comp_potionEquivMap, Category.assoc, ‚Üê (glueData ‚Ñ±).glue_condition j j',
    Category.assoc, LE_.f_comp_potionEquivMap_assoc, LE_.t_comp_assoc]

lemma projHomOfLE_base_isOpenMap_aux (le : LE_ ‚Ñ± ‚Ñ±') (U : Opens (Proj ‚Ñ±)) (i : œÑ) :
    IsOpen <| (projHomOfLE le).base '' (interPotion U i) := by
  -- U(S) -x-> Spec A_(S) -emb-> Proj F
  --                               |
  -- U(S) -x'-> Spec A_(S) -emb'-> Proj F'
  let x : (interPotion'' U i) ‚Üí ((glueData ‚Ñ±).U i) := Subtype.val
  have cont_x : Continuous x := by continuity
  let emb : ((glueData ‚Ñ±).U i) ‚Üí Proj ‚Ñ± := (glueData ‚Ñ±).Œπ i |>.base
  have cont_emb : Continuous emb := by continuity

  let x' : (interPotion'' U i) ‚Üí ((glueData ‚Ñ±').U (le i)) :=
    (Spec.map <| CommRingCat.ofHom (le.potionEquivMap i)).base ‚àò Subtype.val
  have cont_x' : Continuous x' := by continuity
  have x'_openMap : IsOpenMap x' := by
    have := (interPotion'' U i).2.isOpenMap_subtype_val
    haveI : IsIso (Spec.map <| CommRingCat.ofHom (le.potionEquivMap i).toRingHom) := by
      use Spec.map <| CommRingCat.ofHom (le.potionEquivMap i).symm
      simp [‚Üê Spec.map_comp, ‚Üê CommRingCat.ofHom_comp]

    haveI t : IsOpenImmersion (Spec.map <| CommRingCat.ofHom (le.potionEquivMap i).toRingHom) :=
      inferInstance
    exact IsOpenMap.comp (t.base_open.isOpenMap) (interPotion'' U i).2.isOpenMap_subtype_val

  let emb' : ((glueData ‚Ñ±').U (le i)) ‚Üí Proj ‚Ñ±' := (glueData ‚Ñ±').Œπ (le i) |>.base
  have cont_emb' : Continuous emb' := by continuity
  have emb'_openEmb : IsOpenEmbedding emb' :=
    (inferInstance : IsOpenImmersion <| (glueData ‚Ñ±').Œπ (le i)).1
  have emb'_openMap : IsOpenMap emb' := emb'_openEmb.isOpenMap

  have H : IsOpenMap (emb' ‚àò x') := emb'_openMap.comp x'_openMap

  have comm : (projHomOfLE le).base ‚àò emb ‚àò x = emb' ‚àò x' := by
    ext pt
    simp only [glueData_U, Function.comp_apply, emb, emb', x]
    erw [projHomOfLE_comp_Œπ_base_apply]
    rfl

  have eq : (projHomOfLE le).base '' (interPotion U i) = Set.range ((projHomOfLE le).base ‚àò emb ‚àò x) := by
    ext pt
    simp only [Opens.coe_inf, glueData_U, Scheme.Hom.coe_opensRange, Set.mem_image,
      Set.mem_inter_iff, Set.mem_range, SetLike.mem_coe, Function.comp_apply, Subtype.exists,
      Opens.mem_mk, Opens.carrier_eq_coe, Set.mem_preimage, exists_prop, emb, x]
    constructor
    ¬∑ rintro ‚ü®pt, ‚ü®‚ü®pt, rfl‚ü©, hpt‚ü©, rfl‚ü©
      exact ‚ü®pt, hpt, rfl‚ü©
    ¬∑ rintro ‚ü®pt, hpt, rfl‚ü©
      exact ‚ü®((glueData ‚Ñ±).Œπ i).base pt, ‚ü®‚ü®_, rfl‚ü©, hpt‚ü©, rfl‚ü©
  rw [eq, comm]
  exact H.isOpen_range

lemma projHomOfLE_base_isOpenMap (le : LE_ ‚Ñ± ‚Ñ±')  :
    IsOpenMap (projHomOfLE le).base := by
  intro U hU
  lift U to (Opens (Proj ‚Ñ±)) using hU
  rw [open_eq_iSup _ U]
  erw [show (projHomOfLE le).base '' (‚®Ü i, interPotion U i).1 =
    ‚®Ü (i : œÑ), (projHomOfLE le).base '' (interPotion U i) by simp [Set.image_iUnion]]
  apply isOpen_sUnion
  rintro _ ‚ü®S, rfl‚ü©
  exact projHomOfLE_base_isOpenMap_aux le U S


lemma projHomOfLE_base_isOpenEmbedding (le : LE_ ‚Ñ± ‚Ñ±') :
    Topology.IsOpenEmbedding (projHomOfLE le).base := by
  apply Topology.IsOpenEmbedding.of_continuous_injective_isOpenMap
  ¬∑ continuity
  ¬∑ apply projHomOfLE_base_injective
  ¬∑ apply projHomOfLE_base_isOpenMap

instance (le : LE_ ‚Ñ± ‚Ñ±') : IsOpenImmersion (projHomOfLE le) := by
  rw [isOpenImmersion_iff_stalk]
  constructor
  ¬∑ apply projHomOfLE_base_isOpenEmbedding
  ¬∑ intro x
    obtain ‚ü®S, hS, rfl‚ü© := (glueData ‚Ñ±).Œπ_jointly_surjective x
    rw [projHomOfLE_stalkMap_eq]
    apply (config := {allowSynthFailures := true}) IsIso.comp_isIso
    apply (config := {allowSynthFailures := true}) IsIso.comp_isIso
    apply (config := {allowSynthFailures := true}) IsIso.comp_isIso
    apply (config := {allowSynthFailures := true}) Scheme.Hom.stalkMap.isIso
    use (Spec.map <| CommRingCat.ofHom <| (le.potionEquivMap S).symm.toRingHom)
    simp [‚Üê Spec.map_comp, ‚Üê CommRingCat.ofHom_comp]

instance (le : LE_ ‚Ñ± ‚Ñ±') : (projHomOfLE le).IsOver (SpecBase ùíú) where
  comp_over := Multicoequalizer.hom_ext _ _ _ <| fun x ‚Ü¶ by
    erw [Multicoequalizer.œÄ_desc, Multicoequalizer.œÄ_desc_assoc, Category.assoc,
      Multicoequalizer.œÄ_desc]
    simp only [GlueData.diagram_right, glueData_U, ‚Üê Spec.map_comp, ‚Üê CommRingCat.ofHom_comp]
    rfl

abbrev idealify (‚Ñ± : œÑ ‚Üí GoodPotionIngredient ùíú) :
    œÑ ‚äï (œÑ √ó GoodPotionIngredient ùíú) ‚Üí GoodPotionIngredient ùíú :=
  Sum.rec ‚Ñ± (fun p ‚Ü¶ ‚Ñ± p.1 * p.2)

abbrev le_idealify (‚Ñ± : œÑ ‚Üí GoodPotionIngredient ùíú) : LE_ ‚Ñ± (idealify ‚Ñ±) where
  t :=
  { toFun := Sum.inl
    inj' := Sum.inl_injective }
  comp := rfl

@[simp]
lemma le_idealify_apply (x) : le_idealify ‚Ñ± x = Sum.inl x := rfl

@[simp]
lemma le_idealify_potionEquivMap (i : œÑ) : (le_idealify ‚Ñ±).potionEquivMap i = RingEquiv.refl _ := by
  ext x
  induction x using Quotient.inductionOn' with | h x =>
  rfl

open HomogeneousSubmonoid in
instance proj_iso_proj_idealify :
    IsIso (projHomOfLE (le_idealify ‚Ñ±)) := by
  apply (config := { allowSynthFailures := true }) AlgebraicGeometry.IsOpenImmersion.to_iso
  rw [TopCat.epi_iff_surjective]
  intro x
  obtain ‚ü®i|‚ü®i, T‚ü©, (x : Spec _), rfl‚ü© :=
    (glueData _).Œπ_jointly_surjective x
  ¬∑ refine ‚ü®((glueData ‚Ñ±).Œπ i).base x, ?_‚ü©
    erw [projHomOfLE_comp_Œπ_base_apply]
    simp
  ¬∑ refine ‚ü®((glueData ‚Ñ±).Œπ i).base
      ‚ü®Ideal.comap (algebraMap ((‚Ñ± i).Potion) _) <| Ideal.comap
        (localizationRingEquivPotion (finitePotionGen (‚Ñ± i).relevant T.fg)) x.asIdeal, inferInstance‚ü©, ?_‚ü©

    erw [projHomOfLE_comp_Œπ_base_apply]
    rw [Scheme.GlueData.Œπ_eq_iff]
    right
    let e : ((‚Ñ± i).1 * ((‚Ñ± i).1 * T.1)).Potion ‚âÉ+* ((‚Ñ± i).1 * T.1).Potion := potionEquiv (by simp [‚Üê mul_assoc])
    refine ‚ü®‚ü®Ideal.comap e x.asIdeal, inferInstance‚ü©, ?_, ?_‚ü©

    ¬∑ refine PrimeSpectrum.ext ?_
      change Ideal.comap _ _ = _
      simp only [glueData_J, glueData_U, le_idealify_apply, mul_toHomogeneousSubmonoid,
        mul_toSubmonoid, le_idealify_potionEquivMap, RingEquiv.coe_ringHom_refl,
        CommRingCat.ofHom_id, Spec.map_id, Scheme.id.base, TopCat.id_app]
      erw [Ideal.comap_comap, Ideal.comap_comap]
      congr 1
      ext x
      induction x using Quotient.inductionOn' with | h x =>
      simp only [mul_toSubmonoid, RingHom.coe_comp, Function.comp_apply, potionToMul_mk]
      erw [HomogeneousLocalization.map_mk]
      simp only [RingHom.id_apply, Subtype.coe_eta, HomogeneousLocalization.val_mk, id_eq]
      rw [‚Üê Localization.mk_one_eq_algebraMap]
      have eq := localizationToPotion_mk' (‚Ñ± i).1 T.1 (finitePotionGen (‚Ñ± i).relevant T.fg) x ‚àÖ id (fun _ ‚Ü¶ 1)
      simp only [mul_toSubmonoid, id_eq, pow_one, Finset.prod_empty, map_one, mul_one] at eq
      erw [eq]
      rfl
    ¬∑ let Œπ := (glueData (idealify ‚Ñ±)).Œπ (Sum.inr ‚ü®i, T‚ü©)
      have io : IsOpenImmersion Œπ := inferInstance
      have io : IsOpenEmbedding Œπ.base := Œπ.isOpenEmbedding
      have inj : Function.Injective Œπ.base := io.injective
      apply inj
      dsimp only
      have := (glueData (idealify ‚Ñ±)).glue_condition
        (Sum.inl i)
        (Sum.inr ‚ü®i, T‚ü©)
      have := congr($(this).base ‚ü®Ideal.comap e x.asIdeal, inferInstance‚ü©)
      erw [this]
      simp only [glueData_J, SetLike.coe_sort_coe, glueData_V, mul_toHomogeneousSubmonoid,
        mul_toSubmonoid, glueData_U, glueData_f, Scheme.comp_coeBase, TopCat.comp_app]
      erw [Scheme.GlueData.Œπ_eq_iff]
      right
      refine ‚ü®‚ü®Ideal.comap e x.asIdeal, inferInstance‚ü©, ?_‚ü©
      simp only [glueData_J, SetLike.coe_sort_coe, glueData_U, mul_toSubmonoid,
        mul_toHomogeneousSubmonoid, glueData_V, glueData_f, glueData_t, RingEquiv.toRingHom_eq_coe,
        Scheme.comp_coeBase, TopCat.comp_app, true_and]
      refine PrimeSpectrum.ext ?_
      change Ideal.comap _ (Ideal.comap _ _) = _
      rw [Ideal.comap_comap]
      ext z
      simp only [Ideal.mem_comap, RingHom.coe_comp, RingHom.coe_coe, Function.comp_apply,
        potionEquiv_trans_apply, mul_toSubmonoid, e]
      induction z using Quotient.inductionOn' with | h z =>
      simp only [mul_toSubmonoid, e]
      erw [HomogeneousLocalization.map_mk]
      swap
      ¬∑ simp only [mul_toSubmonoid, e]
        rw [mul_comm (‚Ñ± i).1.1, mul_assoc, Submonoid.mul_self]
        erw [Submonoid.comap_id]
      swap
      ¬∑ intro _ _ h
        exact h
      simp only [mul_toSubmonoid, RingHom.id_apply, Subtype.coe_eta, e]
      rfl

section Sets

variable {‚Ñ± ‚Ñ±' : Set <| GoodPotionIngredient ùíú}

def LE_.of_subset (subset : ‚Ñ± ‚äÜ ‚Ñ±') :
    LE_ (ùíú := ùíú) (œÑ := ‚Ñ±) (œÑ' := ‚Ñ±') Subtype.val Subtype.val where
  t := ‚Ñ±.embeddingOfSubset ‚Ñ±' subset
  comp := rfl

def projHomOfSubset (subset : ‚Ñ± ‚äÜ ‚Ñ±') : Proj (œÑ := ‚Ñ±) Subtype.val ‚ü∂ Proj (œÑ := ‚Ñ±') Subtype.val :=
  projHomOfLE (LE_.of_subset subset)

def projClosureIso :
    Proj (œÑ := (CommSemigroup.Ideal.closure ‚Ñ±)) (‚Ñ± := Subtype.val) ‚âÖ
    Proj (idealify (œÑ := ‚Ñ±) Subtype.val) where
  hom := Multicoequalizer.desc _ _
    (fun (p : CommSemigroup.Ideal.closure ‚Ñ±) ‚Ü¶
      _ ‚â´
      (glueData (idealify (œÑ := ‚Ñ±) Subtype.val)).Œπ (Sum.inr ‚ü®_, _‚ü©)) _
  inv := sorry
  hom_inv_id := sorry
  inv_hom_id := sorry

instance proj_iso_proj_subset :
    IsIso (projHomOfSubset (CommSemigroup.Ideal.subset_closure ‚Ñ±)) := by
  have := proj_iso_proj_idealify (œÑ := ‚Ñ±) (‚Ñ± := Subtype.val)
  have eq : projHomOfSubset (CommSemigroup.Ideal.subset_closure ‚Ñ±) =
      projHomOfLE (le_idealify (œÑ := ‚Ñ±) Subtype.val) ‚â´
      (by

        sorry) := by sorry


end Sets

end GoodPotionIngredient
