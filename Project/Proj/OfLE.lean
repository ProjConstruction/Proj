import Project.Proj.Opens
import Project.Proj.Over
import Project.Proj.Stalk
import Project.ForMathlib.SchemeIsOpenImmersion

import Mathlib.AlgebraicGeometry.Over
import Mathlib.AlgebraicGeometry.Morphisms.OpenImmersion

suppress_compilation

open AlgebraicGeometry CategoryTheory CategoryTheory.Limits Opposite
open TopologicalSpace Topology

namespace GoodPotionIngredient

universe u
variable {Œπ R‚ÇÄ A : Type u}
variable [AddCommGroup Œπ] [CommRing R‚ÇÄ] [CommRing A] [Algebra R‚ÇÄ A] {ùíú : Œπ ‚Üí Submodule R‚ÇÄ A}
variable [DecidableEq Œπ] [GradedAlgebra ùíú]

variable {‚Ñ± ‚Ñ±' : Set (GoodPotionIngredient ùíú)}


def projHomOfLE (le : ‚Ñ± ‚äÜ ‚Ñ±') : Proj ‚Ñ± ‚ü∂ Proj ‚Ñ±' :=
  Multicoequalizer.desc _ _
    (fun S ‚Ü¶ (glueData ‚Ñ±').Œπ ‚ü®S.1, le S.2‚ü©) <| by
    intro S
    simp only [GlueData.diagram_left, GlueData.diagram_right]
    change (Spec.map _) ‚â´ _ = (Spec.map _ ‚â´ Spec.map _) ‚â´ _
    simp only [mul_toHomogeneousSubmonoid, HomogeneousSubmonoid.mul_toSubmonoid, ‚Üê Spec.map_comp,
      RingEquiv.toRingHom_eq_coe]
    have : Spec.map _ ‚â´ Spec.map _ ‚â´ _ = Spec.map _ ‚â´ _ :=
      (glueData ‚Ñ±').glue_condition ‚ü®S.1.1, le S.1.2‚ü©  ‚ü®S.2.1, le S.2.2‚ü©
    dsimp only at this
    simp only [mul_toHomogeneousSubmonoid, HomogeneousSubmonoid.mul_toSubmonoid,
      RingEquiv.toRingHom_eq_coe, ‚Üê Spec.map_comp_assoc] at this
    exact this.symm

@[reassoc (attr := simp)]
lemma projHomOfLE_comp_Œπ (le : ‚Ñ± ‚äÜ ‚Ñ±') (S : ‚Ñ±) :
    (glueData ‚Ñ±).Œπ S ‚â´ projHomOfLE le = (glueData ‚Ñ±').Œπ ‚ü®S.1, le S.2‚ü© := by
  erw [Multicoequalizer.œÄ_desc]

@[simp]
lemma projHomOfLE_comp_Œπ_base (le : ‚Ñ± ‚äÜ ‚Ñ±') (S : ‚Ñ±) :
    ((glueData ‚Ñ±).Œπ S).base ‚â´ (projHomOfLE le).base = ((glueData ‚Ñ±').Œπ ‚ü®S.1, le S.2‚ü©).base := by
  ext x
  exact congr($(projHomOfLE_comp_Œπ le S).base x)

@[simp]
lemma projHomOfLE_comp_Œπ_base' (le : ‚Ñ± ‚äÜ ‚Ñ±') (S : ‚Ñ±) :
    (projHomOfLE le).base ‚àò ((glueData ‚Ñ±).Œπ S).base = ((glueData ‚Ñ±').Œπ ‚ü®S.1, le S.2‚ü©).base := by
  ext x
  exact congr($(projHomOfLE_comp_Œπ le S).base x)


@[simp]
lemma projHomOfLE_comp_Œπ_base_apply (le : ‚Ñ± ‚äÜ ‚Ñ±') (S : ‚Ñ±) (x : Spec (CommRingCat.of S.1.Potion)) :
    (projHomOfLE le).base (((glueData ‚Ñ±).Œπ S).base x) = ((glueData ‚Ñ±').Œπ ‚ü®S.1, le S.2‚ü©).base x := by
  exact congr($(projHomOfLE_comp_Œπ le S).base x)

@[reassoc]
lemma projHomOfLE_stalkMap_aux (le : ‚Ñ± ‚äÜ ‚Ñ±') (S : ‚Ñ±) (x : Spec (CommRingCat.of S.1.Potion)) :
    Scheme.Hom.stalkMap
      (projHomOfLE le) (((glueData ‚Ñ±).Œπ S).base x) ‚â´
    (stalkIso ‚Ñ± S x).hom =
    (TopCat.Presheaf.stalkCongr _ (by simp only [projHomOfLE_comp_Œπ_base_apply]; rfl)).hom ‚â´
      (stalkIso ‚Ñ±' ‚ü®S.1, le S.2‚ü© x).hom  := by

  simp only [stalkIso, asIso_hom]
  erw [‚Üê Scheme.Hom.stalkMap_comp]
  apply TopCat.Presheaf.stalk_hom_ext

  intro U hxU
  simp only [Scheme.comp_coeBase, TopCat.comp_app, TopCat.Presheaf.stalkCongr_hom,
    TopCat.Presheaf.germ_stalkSpecializes_assoc]
  erw [PresheafedSpace.stalkMap_germ]
  simp only [TopCat.Presheaf.pushforward_obj_obj]
  have := PresheafedSpace.stalkMap_germ ((glueData ‚Ñ±).Œπ S ‚â´ projHomOfLE le).toLRSHom.toShHom
    U x hxU
  erw [this]
  change ((glueData ‚Ñ±).Œπ S ‚â´ projHomOfLE le).c.app _ ‚â´ ((glueData ‚Ñ±).U S).presheaf.germ _ _ _ = _
  have : ((glueData ‚Ñ±).Œπ S ‚â´ projHomOfLE le).c.app (op U) =
    ((glueData ‚Ñ±').Œπ ‚ü®S.1, le S.2‚ü©).c.app (op U) ‚â´
    (((glueData ‚Ñ±').U ‚ü®S.1, le S.2‚ü©).presheaf |>.map (eqToHom (by simp))) := by
    have := projHomOfLE_comp_Œπ le S
    rw [Scheme.Hom.ext_iff] at this
    obtain ‚ü®h_base, h_app‚ü© := this
    have := h_app U
    simp only [glueData_U, Scheme.comp_coeBase, TopologicalSpace.Opens.map_comp_obj, Scheme.Hom.app,
      Scheme.comp_app, eqToHom_op, Category.assoc, TopCat.Presheaf.pushforward_obj_obj,
      Functor.op_obj] at this ‚ä¢
    rw [‚Üê this]
    simp
  rw [this]
  simp

lemma projHomOfLE_stalkMap_eq (le : ‚Ñ± ‚äÜ ‚Ñ±') (S : ‚Ñ±) (x : Spec (CommRingCat.of S.1.Potion)) :
    Scheme.Hom.stalkMap (projHomOfLE le) (((glueData ‚Ñ±).Œπ S).base x) =
    (TopCat.Presheaf.stalkCongr _ (by simp only [projHomOfLE_comp_Œπ_base_apply]; rfl)).hom ‚â´
      (stalkIso ‚Ñ±' ‚ü®S.1, le S.2‚ü© x).hom ‚â´ (stalkIso ‚Ñ± S x).inv  := by
  rw [‚Üê projHomOfLE_stalkMap_aux_assoc]
  simp

lemma projHomOfLE_base_injective (le : ‚Ñ± ‚äÜ ‚Ñ±') :
    Function.Injective (projHomOfLE le).base := by
  intro x x' h
  obtain ‚ü®S, x, rfl‚ü© := (glueData ‚Ñ±).Œπ_jointly_surjective x
  obtain ‚ü®S', x', rfl‚ü© := (glueData ‚Ñ±).Œπ_jointly_surjective x'
  rw [projHomOfLE_comp_Œπ_base_apply, projHomOfLE_comp_Œπ_base_apply] at h
  rw [Scheme.GlueData.Œπ_eq_iff] at h
  obtain eq|‚ü®y, h‚ÇÅ, h‚ÇÇ‚ü© := h
  ¬∑ simp only [glueData_J, glueData_U, Sigma.mk.inj_iff, Subtype.mk.injEq] at eq
    rcases eq with ‚ü®eq‚ÇÅ, eq‚ÇÇ‚ü©
    rw [‚Üê Subtype.ext_iff] at eq‚ÇÅ
    subst eq‚ÇÅ
    simp only [heq_eq_eq] at eq‚ÇÇ
    subst eq‚ÇÇ
    rfl
  dsimp only at h‚ÇÅ h‚ÇÇ
  rw [‚Üê h‚ÇÅ, ‚Üê h‚ÇÇ]
  exact congr($((glueData ‚Ñ±).glue_condition _ _).base y).symm

lemma projHomOfLE_base_isOpenMap_aux (le : ‚Ñ± ‚äÜ ‚Ñ±') (U : Opens (Proj ‚Ñ±)) (S : ‚Ñ±) :
    IsOpen <| (projHomOfLE le).base '' (interPotion U S) := by
  -- U(S) -x-> Spec A_(S) -emb-> Proj F
  --                               |
  -- U(S) -x'-> Spec A_(S) -emb'-> Proj F'
  let x : (interPotion'' U S) ‚Üí ((glueData ‚Ñ±).U S) := Subtype.val
  have cont_x : Continuous x := by continuity
  let emb : ((glueData ‚Ñ±).U S) ‚Üí Proj ‚Ñ± := (glueData ‚Ñ±).Œπ S |>.base
  have cont_emb : Continuous emb := by continuity

  let x' : (interPotion'' U S) ‚Üí ((glueData ‚Ñ±').U ‚ü®S.1, le S.2‚ü©) := Subtype.val
  have cont_x' : Continuous x' := by continuity
  have x'_openMap : IsOpenMap x' := (interPotion'' U S).2.isOpenMap_subtype_val
  let emb' : ((glueData ‚Ñ±').U ‚ü®S.1, le S.2‚ü©) ‚Üí Proj ‚Ñ±' := (glueData ‚Ñ±').Œπ ‚ü®S.1, le S.2‚ü© |>.base
  have cont_emb' : Continuous emb' := by continuity
  have emb'_openEmb : IsOpenEmbedding emb' :=
    (inferInstance : IsOpenImmersion <| (glueData ‚Ñ±').Œπ ‚ü®S.1, le S.2‚ü©).1
  have emb'_openMap : IsOpenMap emb' := emb'_openEmb.isOpenMap

  have H : IsOpenMap (emb' ‚àò x') := emb'_openMap.comp x'_openMap

  have comm : (projHomOfLE le).base ‚àò emb ‚àò x = emb' ‚àò x' := by
    ext pt
    simp only [glueData_U, Function.comp_apply, emb, emb', x]
    erw [projHomOfLE_comp_Œπ_base_apply]
    rfl

  have eq : (projHomOfLE le).base '' (interPotion U S) = Set.range ((projHomOfLE le).base ‚àò emb ‚àò x) := by
    ext pt
    simp only [Opens.coe_inf, glueData_U, Scheme.Hom.coe_opensRange, Set.mem_image,
      Set.mem_inter_iff, Set.mem_range, SetLike.mem_coe, Function.comp_apply, Subtype.exists,
      Opens.mem_mk, Opens.carrier_eq_coe, Set.mem_preimage, exists_prop, emb, x]
    constructor
    ¬∑ rintro ‚ü®pt, ‚ü®‚ü®pt, rfl‚ü©, hpt‚ü©, rfl‚ü©
      exact ‚ü®pt, hpt, rfl‚ü©
    ¬∑ rintro ‚ü®pt, hpt, rfl‚ü©
      exact ‚ü®((glueData ‚Ñ±).Œπ S).base pt, ‚ü®‚ü®_, rfl‚ü©, hpt‚ü©, rfl‚ü©
  rw [eq, comm]
  exact H.isOpen_range

lemma projHomOfLE_base_isOpenMap (le : ‚Ñ± ‚äÜ ‚Ñ±') :
    IsOpenMap (projHomOfLE le).base := by
  intro U hU
  lift U to (Opens (Proj ‚Ñ±)) using hU
  rw [open_eq_iSup _ U]
  erw [show (projHomOfLE le).base '' (‚®Ü S, interPotion U S).1 =
    ‚®Ü (S : ‚Ñ±), (projHomOfLE le).base '' (interPotion U S) by simp [Set.image_iUnion]]
  apply isOpen_sUnion
  rintro _ ‚ü®S, rfl‚ü©
  exact projHomOfLE_base_isOpenMap_aux le U S


lemma projHomOfLE_base_isOpenEmbedding (le : ‚Ñ± ‚äÜ ‚Ñ±') :
    Topology.IsOpenEmbedding (projHomOfLE le).base := by
  apply Topology.IsOpenEmbedding.of_continuous_injective_isOpenMap
  ¬∑ continuity
  ¬∑ apply projHomOfLE_base_injective
  ¬∑ apply projHomOfLE_base_isOpenMap

instance (le : ‚Ñ± ‚äÜ ‚Ñ±') : IsOpenImmersion (projHomOfLE le) := by
  rw [isOpenImmersion_iff_stalk]
  constructor
  ¬∑ apply projHomOfLE_base_isOpenEmbedding
  ¬∑ intro x
    obtain ‚ü®S, hS, rfl‚ü© := (glueData ‚Ñ±).Œπ_jointly_surjective x
    rw [projHomOfLE_stalkMap_eq]
    infer_instance

instance (le : ‚Ñ± ‚äÜ ‚Ñ±') : (projHomOfLE le).IsOver (SpecBase ùíú) where
  comp_over := Multicoequalizer.hom_ext _ _ _ <| fun _ ‚Ü¶ by
    erw [Multicoequalizer.œÄ_desc, Multicoequalizer.œÄ_desc_assoc, Multicoequalizer.œÄ_desc]

-- lemma proj_isIso_projClosure :
--     IsIso (projHomOfLE Subsemigroup.subset_closure : Proj ‚Ñ± ‚ü∂ Proj (Subsemigroup.closure ‚Ñ±)) := by
--   apply (config := { allowSynthFailures := true }) AlgebraicGeometry.IsOpenImmersion.to_iso
--   rw [TopCat.epi_iff_surjective]
--   intro x
--   have := (glueData (Subsemigroup.closure ‚Ñ± : Set (GoodPotionIngredient ùíú))).Œπ
--   sorry

end GoodPotionIngredient
