import Project.Grading.Potions
import Project.ForMathlib.SchemeIsOpenImmersion

import Mathlib.AlgebraicGeometry.Over
import Mathlib.AlgebraicGeometry.Morphisms.OpenImmersion

suppress_compilation

open AlgebraicGeometry CategoryTheory CategoryTheory.Limits Opposite

namespace GoodPotionIngredient

universe u
variable {Œπ R‚ÇÄ A : Type u}
variable [AddCommGroup Œπ] [CommRing R‚ÇÄ] [CommRing A] [Algebra R‚ÇÄ A] {ùíú : Œπ ‚Üí Submodule R‚ÇÄ A}
variable [DecidableEq Œπ] [GradedAlgebra ùíú]

variable (‚Ñ± ‚Ñ±' : Set (GoodPotionIngredient ùíú))

scoped notation "SpecBase"‚Ñ¨ => Spec (CommRingCat.of (‚Ñ¨ 0))

def stalkIso (S : ‚Ñ±) (x : Spec (CommRingCat.of S.1.Potion)) :
    (Proj ‚Ñ±).presheaf.stalk (((glueData ‚Ñ±).Œπ S).base x) ‚âÖ
    (Spec (CommRingCat.of S.1.Potion)).presheaf.stalk x := by
  have ioi : IsOpenImmersion ((glueData ‚Ñ±).Œπ S) := inferInstance
  rw [isOpenImmersion_iff_stalk] at ioi
  haveI := ioi.2 x
  exact asIso (Scheme.Hom.stalkMap ((glueData ‚Ñ±).Œπ S) x)

variable {‚Ñ±} in
def Ddagger (S : ‚Ñ±) : Scheme :=
  (Proj ‚Ñ±).restrict (U := Spec (CommRingCat.of <| S.1.Potion)) (f := ((glueData ‚Ñ±).Œπ S).base) <| by
    have : IsOpenImmersion ((glueData ‚Ñ±).Œπ S) := inferInstance
    exact AlgebraicGeometry.Scheme.Hom.isOpenEmbedding _

variable {‚Ñ±} in
def DdaggerIsoSpec (S : ‚Ñ±) : Ddagger S ‚âÖ (Spec (CommRingCat.of S.1.Potion)) :=
  IsOpenImmersion.isoRestrict _ |>.symm

variable {‚Ñ±} in
abbrev DdaggerToProj (S : ‚Ñ±) : Ddagger S ‚ü∂ Proj ‚Ñ± := Scheme.ofRestrict _ _

instance (S : ‚Ñ±) : (Ddagger S).Over (Proj ‚Ñ±) where
  hom := DdaggerToProj S

lemma Ddagger_structureMorphism_over_proj_eq (S : ‚Ñ±) :
    (Ddagger S) ‚Üò (Proj ‚Ñ±) = DdaggerToProj S := rfl

instance (S : ‚Ñ±) : (Ddagger S).Over (SpecBase ùíú) where
  hom := (DdaggerIsoSpec S).hom ‚â´ Spec.map (CommRingCat.ofHom <| algebraMap _ _)

variable {‚Ñ±} in
lemma Ddagger_structureMorphism_over_spec_eq (S : ‚Ñ±) :
    (Ddagger S) ‚Üò (SpecBase ùíú) = (DdaggerIsoSpec S).hom ‚â´ Spec.map (CommRingCat.ofHom <| algebraMap _ _) := rfl

def projHomOfLE (le : ‚Ñ± ‚äÜ ‚Ñ±') : Proj ‚Ñ± ‚ü∂ Proj ‚Ñ±' :=
  Multicoequalizer.desc _ _
    (fun S ‚Ü¶ (glueData ‚Ñ±').Œπ ‚ü®S.1, le S.2‚ü©) <| by
    intro S
    simp only [GlueData.diagram_left, GlueData.diagram_right]
    change (Spec.map _) ‚â´ _ = (Spec.map _ ‚â´ Spec.map _) ‚â´ _
    simp only [mul_toHomogeneousSubmonoid, HomogeneousSubmonoid.mul_toSubmonoid, ‚Üê Spec.map_comp,
      RingEquiv.toRingHom_eq_coe]
    have : Spec.map _ ‚â´ Spec.map _ ‚â´ _ = Spec.map _ ‚â´ _ :=
      (glueData ‚Ñ±').glue_condition ‚ü®S.1.1, le S.1.2‚ü©  ‚ü®S.2.1, le S.2.2‚ü©
    dsimp only at this
    simp only [mul_toHomogeneousSubmonoid, HomogeneousSubmonoid.mul_toSubmonoid,
      RingEquiv.toRingHom_eq_coe, ‚Üê Spec.map_comp_assoc] at this
    exact this.symm

@[reassoc (attr := simp)]
lemma projHomOfLE_comp_Œπ (le : ‚Ñ± ‚äÜ ‚Ñ±') (S : ‚Ñ±) :
    (glueData ‚Ñ±).Œπ S ‚â´ projHomOfLE ‚Ñ± ‚Ñ±' le = (glueData ‚Ñ±').Œπ ‚ü®S.1, le S.2‚ü© := by
  erw [Multicoequalizer.œÄ_desc]

@[simp]
lemma projHomOfLE_eq_apply (le : ‚Ñ± ‚äÜ ‚Ñ±') (S : ‚Ñ±) (x : Spec (CommRingCat.of S.1.Potion)) :
    (projHomOfLE ‚Ñ± ‚Ñ±' le).base (((glueData ‚Ñ±).Œπ S).base x) = ((glueData ‚Ñ±').Œπ ‚ü®S.1, le S.2‚ü©).base x := by
  exact congr($(projHomOfLE_comp_Œπ ‚Ñ± ‚Ñ±' le S).base x)

@[reassoc]
lemma projHomOfLE_stalkMap_aux (le : ‚Ñ± ‚äÜ ‚Ñ±') (S : ‚Ñ±) (x : Spec (CommRingCat.of S.1.Potion)) :
    Scheme.Hom.stalkMap
      (projHomOfLE ‚Ñ± ‚Ñ±' le) (((glueData ‚Ñ±).Œπ S).base x) ‚â´
    (stalkIso ‚Ñ± S x).hom =
    (TopCat.Presheaf.stalkCongr _ (by simp only [projHomOfLE_eq_apply]; rfl)).hom ‚â´
      (stalkIso ‚Ñ±' ‚ü®S.1, le S.2‚ü© x).hom  := by

  simp only [stalkIso, asIso_hom]
  erw [‚Üê Scheme.Hom.stalkMap_comp]
  apply TopCat.Presheaf.stalk_hom_ext

  intro U hxU
  simp only [Scheme.comp_coeBase, TopCat.comp_app, TopCat.Presheaf.stalkCongr_hom,
    TopCat.Presheaf.germ_stalkSpecializes_assoc]
  erw [PresheafedSpace.stalkMap_germ]
  simp only [TopCat.Presheaf.pushforward_obj_obj]
  have := PresheafedSpace.stalkMap_germ ((glueData ‚Ñ±).Œπ S ‚â´ projHomOfLE ‚Ñ± ‚Ñ±' le).toLRSHom.toShHom
    U x hxU
  erw [this]
  change ((glueData ‚Ñ±).Œπ S ‚â´ projHomOfLE ‚Ñ± ‚Ñ±' le).c.app _ ‚â´ ((glueData ‚Ñ±).U S).presheaf.germ _ _ _ = _
  have : ((glueData ‚Ñ±).Œπ S ‚â´ projHomOfLE ‚Ñ± ‚Ñ±' le).c.app (op U) =
    ((glueData ‚Ñ±').Œπ ‚ü®S.1, le S.2‚ü©).c.app (op U) ‚â´
    (((glueData ‚Ñ±').U ‚ü®S.1, le S.2‚ü©).presheaf |>.map (eqToHom (by simp))) := by
    have := projHomOfLE_comp_Œπ ‚Ñ± ‚Ñ±' le S
    rw [Scheme.Hom.ext_iff] at this
    obtain ‚ü®h_base, h_app‚ü© := this
    have := h_app U
    simp only [glueData_U, Scheme.comp_coeBase, TopologicalSpace.Opens.map_comp_obj, Scheme.Hom.app,
      Scheme.comp_app, eqToHom_op, Category.assoc, TopCat.Presheaf.pushforward_obj_obj,
      Functor.op_obj] at this ‚ä¢
    rw [‚Üê this]
    simp
  rw [this]
  simp

lemma projHomOfLE_stalkMap_eq (le : ‚Ñ± ‚äÜ ‚Ñ±') (S : ‚Ñ±) (x : Spec (CommRingCat.of S.1.Potion)) :
    Scheme.Hom.stalkMap
      (projHomOfLE ‚Ñ± ‚Ñ±' le) (((glueData ‚Ñ±).Œπ S).base x)
     =
    (TopCat.Presheaf.stalkCongr _ (by simp only [projHomOfLE_eq_apply]; rfl)).hom ‚â´
      (stalkIso ‚Ñ±' ‚ü®S.1, le S.2‚ü© x).hom ‚â´ (stalkIso ‚Ñ± S x).inv  := by
  rw [‚Üê projHomOfLE_stalkMap_aux_assoc]
  simp

lemma projHomOfLE_base_isOpenMap (le : ‚Ñ± ‚äÜ ‚Ñ±') :
    IsOpenMap (projHomOfLE ‚Ñ± ‚Ñ±' le).base := by
  sorry

lemma projHomOfLE_base_injective (le : ‚Ñ± ‚äÜ ‚Ñ±') :
    Function.Injective (projHomOfLE ‚Ñ± ‚Ñ±' le).base := by
  sorry

lemma projHomOfLE_base_isOpenEmbedding (le : ‚Ñ± ‚äÜ ‚Ñ±') :
    Topology.IsOpenEmbedding (projHomOfLE ‚Ñ± ‚Ñ±' le).base := by
  apply Topology.IsOpenEmbedding.of_continuous_injective_isOpenMap
  ¬∑ continuity
  ¬∑ apply projHomOfLE_base_injective
  ¬∑ apply projHomOfLE_base_isOpenMap

instance (le : ‚Ñ± ‚äÜ ‚Ñ±') : IsOpenImmersion (projHomOfLE ‚Ñ± ‚Ñ±' le) := by
  rw [isOpenImmersion_iff_stalk]
  constructor
  ¬∑ apply projHomOfLE_base_isOpenEmbedding
  ¬∑ intro x
    obtain ‚ü®S, hS, rfl‚ü© := (glueData ‚Ñ±).Œπ_jointly_surjective x
    rw [projHomOfLE_stalkMap_eq]
    infer_instance
-- Ideal ‚Ñ± := {S * S'}
lemma proj_isIso_projClosure :
    IsIso (projHomOfLE _ _ Subsemigroup.subset_closure :
      Proj ‚Ñ± ‚ü∂ Proj (ùíú := ùíú) (Subsemigroup.closure ‚Ñ±)) := by
  apply (config := { allowSynthFailures := true }) AlgebraicGeometry.IsOpenImmersion.to_iso
  rw [TopCat.epi_iff_surjective]
  intro x
  have := (glueData (Subsemigroup.closure ‚Ñ± : Set (GoodPotionIngredient ùíú))).Œπ
  sorry

def over : Proj ‚Ñ± ‚ü∂ SpecBase ùíú :=
  Multicoequalizer.desc _ _
    (fun S ‚Ü¶ (Spec.map <| CommRingCat.ofHom <| algebraMap _ _)) <| by
    intro S
    simp only [GlueData.diagram_left, GlueData.diagram_right]
    change (Spec.map _) ‚â´ _ = (Spec.map _ ‚â´ Spec.map _) ‚â´ _
    simp only [mul_toHomogeneousSubmonoid, HomogeneousSubmonoid.mul_toSubmonoid, ‚Üê Spec.map_comp,
      RingEquiv.toRingHom_eq_coe]
    congr 1

instance : Scheme.Over (X := Proj ‚Ñ±) (SpecBase ùíú) where
  hom :=  over ‚Ñ±

lemma proj_structureMorphism_eq : (Proj ‚Ñ±) ‚Üò (SpecBase ùíú) = over ‚Ñ± := rfl

instance (S : ‚Ñ±) : IsOverTower (Ddagger S) (Proj ‚Ñ±) (SpecBase ùíú) := by
  simp only [Scheme.Hom.isOver_iff]
  rw [Ddagger_structureMorphism_over_spec_eq, proj_structureMorphism_eq,
    Ddagger_structureMorphism_over_proj_eq]
  delta DdaggerToProj DdaggerIsoSpec
  simp only [Iso.symm_hom]
  symm
  rw [CategoryTheory.Iso.inv_comp_eq, ‚Üê Category.assoc]
  rw [IsOpenImmersion.isoRestrict_hom_ofRestrict]
  delta over
  erw [Multicoequalizer.œÄ_desc]

end GoodPotionIngredient
