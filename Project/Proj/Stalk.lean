import Project.ForMathlib.SchemeIsOpenImmersion
import Project.Grading.Potions

import Mathlib.AlgebraicGeometry.Over
import Mathlib.AlgebraicGeometry.Morphisms.OpenImmersion

suppress_compilation

open AlgebraicGeometry CategoryTheory CategoryTheory.Limits Opposite TopologicalSpace

namespace GoodPotionIngredient

universe u
variable {Œπ R‚ÇÄ A : Type u}
variable [AddCommGroup Œπ] [CommRing R‚ÇÄ] [CommRing A] [Algebra R‚ÇÄ A] {ùíú : Œπ ‚Üí Submodule R‚ÇÄ A}
variable [DecidableEq Œπ] [GradedAlgebra ùíú]

variable (‚Ñ± ‚Ñ±' : Set (GoodPotionIngredient ùíú))

def stalkIso (S : ‚Ñ±) (x : Spec (CommRingCat.of S.1.Potion)) :
    (Proj ‚Ñ±).presheaf.stalk (((glueData ‚Ñ±).Œπ S).base x) ‚âÖ
    (Spec (CommRingCat.of S.1.Potion)).presheaf.stalk x := by
  have ioi : IsOpenImmersion ((glueData ‚Ñ±).Œπ S) := inferInstance
  rw [isOpenImmersion_iff_stalk] at ioi
  haveI := ioi.2 x
  exact asIso (Scheme.Hom.stalkMap ((glueData ‚Ñ±).Œπ S) x)

end GoodPotionIngredient
